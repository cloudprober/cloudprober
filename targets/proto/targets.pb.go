// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/google/cloudprober/targets/proto/targets.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/google/cloudprober/targets/gce/proto"
	proto4 "github.com/google/cloudprober/targets/lameduck/proto"
	proto2 "github.com/google/cloudprober/targets/rds/client/proto"
	proto3 "github.com/google/cloudprober/targets/rtc/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TargetsDef struct {
	// Types that are valid to be assigned to Type:
	//	*TargetsDef_HostNames
	//	*TargetsDef_SharedTargets
	//	*TargetsDef_GceTargets
	//	*TargetsDef_RdsTargets
	//	*TargetsDef_RtcTargets
	//	*TargetsDef_DummyTargets
	Type isTargetsDef_Type `protobuf_oneof:"type"`
	// Regex to apply on the targets.
	Regex *string `protobuf:"bytes,21,opt,name=regex" json:"regex,omitempty"`
	// Exclude lameducks. Lameduck targets can be set through RTC (realtime
	// configurator) service. This functionality works only if lame_duck_options
	// are specified.
	ExcludeLameducks             *bool    `protobuf:"varint,22,opt,name=exclude_lameducks,json=excludeLameducks,def=1" json:"exclude_lameducks,omitempty"`
	XXX_NoUnkeyedLiteral         struct{} `json:"-"`
	proto.XXX_InternalExtensions `json:"-"`
	XXX_unrecognized             []byte `json:"-"`
	XXX_sizecache                int32  `json:"-"`
}

func (m *TargetsDef) Reset()         { *m = TargetsDef{} }
func (m *TargetsDef) String() string { return proto.CompactTextString(m) }
func (*TargetsDef) ProtoMessage()    {}
func (*TargetsDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a021db69203ab7b, []int{0}
}

var extRange_TargetsDef = []proto.ExtensionRange{
	{Start: 200, End: 536870911},
}

func (*TargetsDef) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_TargetsDef
}

func (m *TargetsDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TargetsDef.Unmarshal(m, b)
}
func (m *TargetsDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TargetsDef.Marshal(b, m, deterministic)
}
func (m *TargetsDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetsDef.Merge(m, src)
}
func (m *TargetsDef) XXX_Size() int {
	return xxx_messageInfo_TargetsDef.Size(m)
}
func (m *TargetsDef) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetsDef.DiscardUnknown(m)
}

var xxx_messageInfo_TargetsDef proto.InternalMessageInfo

const Default_TargetsDef_ExcludeLameducks bool = true

type isTargetsDef_Type interface {
	isTargetsDef_Type()
}

type TargetsDef_HostNames struct {
	HostNames string `protobuf:"bytes,1,opt,name=host_names,json=hostNames,oneof"`
}

type TargetsDef_SharedTargets struct {
	SharedTargets string `protobuf:"bytes,5,opt,name=shared_targets,json=sharedTargets,oneof"`
}

type TargetsDef_GceTargets struct {
	GceTargets *proto1.TargetsConf `protobuf:"bytes,2,opt,name=gce_targets,json=gceTargets,oneof"`
}

type TargetsDef_RdsTargets struct {
	RdsTargets *proto2.ClientConf `protobuf:"bytes,3,opt,name=rds_targets,json=rdsTargets,oneof"`
}

type TargetsDef_RtcTargets struct {
	RtcTargets *proto3.TargetsConf `protobuf:"bytes,4,opt,name=rtc_targets,json=rtcTargets,oneof"`
}

type TargetsDef_DummyTargets struct {
	DummyTargets *DummyTargets `protobuf:"bytes,20,opt,name=dummy_targets,json=dummyTargets,oneof"`
}

func (*TargetsDef_HostNames) isTargetsDef_Type() {}

func (*TargetsDef_SharedTargets) isTargetsDef_Type() {}

func (*TargetsDef_GceTargets) isTargetsDef_Type() {}

func (*TargetsDef_RdsTargets) isTargetsDef_Type() {}

func (*TargetsDef_RtcTargets) isTargetsDef_Type() {}

func (*TargetsDef_DummyTargets) isTargetsDef_Type() {}

func (m *TargetsDef) GetType() isTargetsDef_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TargetsDef) GetHostNames() string {
	if x, ok := m.GetType().(*TargetsDef_HostNames); ok {
		return x.HostNames
	}
	return ""
}

func (m *TargetsDef) GetSharedTargets() string {
	if x, ok := m.GetType().(*TargetsDef_SharedTargets); ok {
		return x.SharedTargets
	}
	return ""
}

func (m *TargetsDef) GetGceTargets() *proto1.TargetsConf {
	if x, ok := m.GetType().(*TargetsDef_GceTargets); ok {
		return x.GceTargets
	}
	return nil
}

func (m *TargetsDef) GetRdsTargets() *proto2.ClientConf {
	if x, ok := m.GetType().(*TargetsDef_RdsTargets); ok {
		return x.RdsTargets
	}
	return nil
}

func (m *TargetsDef) GetRtcTargets() *proto3.TargetsConf {
	if x, ok := m.GetType().(*TargetsDef_RtcTargets); ok {
		return x.RtcTargets
	}
	return nil
}

func (m *TargetsDef) GetDummyTargets() *DummyTargets {
	if x, ok := m.GetType().(*TargetsDef_DummyTargets); ok {
		return x.DummyTargets
	}
	return nil
}

func (m *TargetsDef) GetRegex() string {
	if m != nil && m.Regex != nil {
		return *m.Regex
	}
	return ""
}

func (m *TargetsDef) GetExcludeLameducks() bool {
	if m != nil && m.ExcludeLameducks != nil {
		return *m.ExcludeLameducks
	}
	return Default_TargetsDef_ExcludeLameducks
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TargetsDef) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TargetsDef_HostNames)(nil),
		(*TargetsDef_SharedTargets)(nil),
		(*TargetsDef_GceTargets)(nil),
		(*TargetsDef_RdsTargets)(nil),
		(*TargetsDef_RtcTargets)(nil),
		(*TargetsDef_DummyTargets)(nil),
	}
}

// DummyTargets represent empty targets, which are useful for external
// probes that do not have any "proper" targets.  Such as ilbprober.
type DummyTargets struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DummyTargets) Reset()         { *m = DummyTargets{} }
func (m *DummyTargets) String() string { return proto.CompactTextString(m) }
func (*DummyTargets) ProtoMessage()    {}
func (*DummyTargets) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a021db69203ab7b, []int{1}
}

func (m *DummyTargets) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DummyTargets.Unmarshal(m, b)
}
func (m *DummyTargets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DummyTargets.Marshal(b, m, deterministic)
}
func (m *DummyTargets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DummyTargets.Merge(m, src)
}
func (m *DummyTargets) XXX_Size() int {
	return xxx_messageInfo_DummyTargets.Size(m)
}
func (m *DummyTargets) XXX_DiscardUnknown() {
	xxx_messageInfo_DummyTargets.DiscardUnknown(m)
}

var xxx_messageInfo_DummyTargets proto.InternalMessageInfo

// Global targets options. These options are independent of the per-probe
// targets which are defined by the "Targets" type above.
//
// Currently these options are used only for GCE targets to control things like
// how often to re-evaluate the targets and whether to check for lame ducks or
// not.
type GlobalTargetsOptions struct {
	// GCE targets options.
	GlobalGceTargetsOptions *proto1.GlobalOptions `protobuf:"bytes,1,opt,name=global_gce_targets_options,json=globalGceTargetsOptions" json:"global_gce_targets_options,omitempty"`
	// Lame duck options. If provided, targets module checks for the lame duck
	// targets and removes them from the targets list.
	LameDuckOptions      *proto4.Options `protobuf:"bytes,2,opt,name=lame_duck_options,json=lameDuckOptions" json:"lame_duck_options,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GlobalTargetsOptions) Reset()         { *m = GlobalTargetsOptions{} }
func (m *GlobalTargetsOptions) String() string { return proto.CompactTextString(m) }
func (*GlobalTargetsOptions) ProtoMessage()    {}
func (*GlobalTargetsOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a021db69203ab7b, []int{2}
}

func (m *GlobalTargetsOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GlobalTargetsOptions.Unmarshal(m, b)
}
func (m *GlobalTargetsOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GlobalTargetsOptions.Marshal(b, m, deterministic)
}
func (m *GlobalTargetsOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GlobalTargetsOptions.Merge(m, src)
}
func (m *GlobalTargetsOptions) XXX_Size() int {
	return xxx_messageInfo_GlobalTargetsOptions.Size(m)
}
func (m *GlobalTargetsOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_GlobalTargetsOptions.DiscardUnknown(m)
}

var xxx_messageInfo_GlobalTargetsOptions proto.InternalMessageInfo

func (m *GlobalTargetsOptions) GetGlobalGceTargetsOptions() *proto1.GlobalOptions {
	if m != nil {
		return m.GlobalGceTargetsOptions
	}
	return nil
}

func (m *GlobalTargetsOptions) GetLameDuckOptions() *proto4.Options {
	if m != nil {
		return m.LameDuckOptions
	}
	return nil
}

func init() {
	proto.RegisterType((*TargetsDef)(nil), "cloudprober.targets.TargetsDef")
	proto.RegisterType((*DummyTargets)(nil), "cloudprober.targets.DummyTargets")
	proto.RegisterType((*GlobalTargetsOptions)(nil), "cloudprober.targets.GlobalTargetsOptions")
}

func init() {
	proto.RegisterFile("github.com/google/cloudprober/targets/proto/targets.proto", fileDescriptor_6a021db69203ab7b)
}

var fileDescriptor_6a021db69203ab7b = []byte{
	// 446 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xe3, 0x36, 0x45, 0xcd, 0xa4, 0x2d, 0xad, 0x09, 0x10, 0xe5, 0x42, 0x08, 0xff, 0x22,
	0x0e, 0xb6, 0xe8, 0x0d, 0xc4, 0x05, 0x12, 0x91, 0x1c, 0x10, 0x08, 0x8b, 0xbb, 0xe5, 0xcc, 0x4e,
	0x36, 0x51, 0x6d, 0x6f, 0xb4, 0xbb, 0x96, 0xda, 0x5b, 0x1e, 0x8f, 0x13, 0x47, 0x9e, 0x07, 0xd9,
	0xbb, 0x6b, 0x59, 0xc8, 0x54, 0x39, 0xce, 0x37, 0xdf, 0xfc, 0x76, 0x66, 0x67, 0xe0, 0x3d, 0xdf,
	0xea, 0x4d, 0xb1, 0x0a, 0x50, 0x64, 0x21, 0x17, 0x82, 0xa7, 0x14, 0x62, 0x2a, 0x0a, 0xb6, 0x93,
	0x62, 0x45, 0x32, 0xd4, 0x89, 0xe4, 0xa4, 0x55, 0xb8, 0x93, 0x42, 0x0b, 0x17, 0x05, 0x55, 0xe4,
	0x3f, 0x6a, 0x18, 0x03, 0x9b, 0x1a, 0x7d, 0x3c, 0x8c, 0xc7, 0x91, 0x2c, 0x13, 0x45, 0xbe, 0xde,
	0x72, 0x83, 0x1c, 0x7d, 0x3a, 0xac, 0x3a, 0x4d, 0x32, 0x62, 0x05, 0xde, 0xb4, 0x21, 0x66, 0x87,
	0x21, 0x24, 0x53, 0x21, 0xa6, 0x5b, 0xca, 0x75, 0x1b, 0xe4, 0xc0, 0x29, 0xa4, 0xc6, 0x96, 0xea,
	0xc9, 0x9f, 0x63, 0x80, 0x9f, 0xc6, 0x32, 0xa7, 0xb5, 0xff, 0x0c, 0x60, 0x23, 0x94, 0x8e, 0xf3,
	0x24, 0x23, 0x35, 0xf4, 0xc6, 0xde, 0xb4, 0xb7, 0xec, 0x44, 0xbd, 0x52, 0xfb, 0x56, 0x4a, 0xfe,
	0x1b, 0xb8, 0x50, 0x9b, 0x44, 0x12, 0x8b, 0x2d, 0x78, 0x78, 0x62, 0x4d, 0xe7, 0x46, 0xb7, 0x30,
	0x7f, 0x01, 0x7d, 0x8e, 0x54, 0xbb, 0x8e, 0xc6, 0xde, 0xb4, 0x7f, 0xfd, 0x32, 0x68, 0xd9, 0x43,
	0xc0, 0x91, 0x02, 0x5b, 0x36, 0x13, 0xf9, 0x7a, 0xd9, 0x89, 0x80, 0x23, 0x39, 0xd0, 0x17, 0xe8,
	0x4b, 0xa6, 0x6a, 0xd0, 0x71, 0x05, 0x7a, 0xd1, 0x0a, 0x92, 0x4c, 0x05, 0xb3, 0xea, 0xa3, 0x1c,
	0x47, 0x32, 0xd5, 0x68, 0x48, 0x6a, 0xac, 0x39, 0xdd, 0x7b, 0x1a, 0x92, 0x1a, 0xff, 0x6d, 0x48,
	0x6a, 0x74, 0xa0, 0x25, 0x9c, 0xb3, 0x22, 0xcb, 0xee, 0x6a, 0xd4, 0xa0, 0x42, 0x3d, 0x6f, 0x45,
	0xcd, 0x4b, 0xa7, 0xad, 0x5c, 0x76, 0xa2, 0x33, 0xd6, 0x88, 0xfd, 0x01, 0x9c, 0x48, 0xe2, 0x74,
	0x3b, 0x7c, 0x5c, 0xfe, 0x61, 0x64, 0x02, 0xff, 0x1d, 0x5c, 0xd1, 0x2d, 0xa6, 0x05, 0xa3, 0xd8,
	0x1d, 0x8f, 0x1a, 0x3e, 0x19, 0x7b, 0xd3, 0xd3, 0x0f, 0x5d, 0x2d, 0x0b, 0x8a, 0x2e, 0x6d, 0xfa,
	0xab, 0xcb, 0xbe, 0xed, 0x9d, 0xfe, 0xf2, 0x2e, 0xf7, 0xfb, 0xfd, 0xfe, 0xe8, 0xf3, 0x03, 0xe8,
	0xea, 0xbb, 0x1d, 0x4d, 0x2e, 0xe0, 0xac, 0xf9, 0xf6, 0xe4, 0xb7, 0x07, 0x83, 0x45, 0x2a, 0x56,
	0x49, 0x6a, 0x95, 0xef, 0x3b, 0xbd, 0x15, 0xb9, 0xf2, 0x11, 0x46, 0xbc, 0xd2, 0xe3, 0xc6, 0xbe,
	0x62, 0x61, 0xb2, 0xd5, 0x09, 0xf4, 0xaf, 0x5f, 0xff, 0x77, 0x6f, 0x06, 0x69, 0x59, 0xd1, 0x53,
	0x43, 0x5a, 0xd4, 0xdb, 0x73, 0x8f, 0xfc, 0x80, 0xab, 0x72, 0x96, 0xb8, 0x6c, 0xb7, 0x66, 0x9b,
	0x9b, 0x78, 0xd5, 0xca, 0x76, 0x93, 0x07, 0x0e, 0xfd, 0xb0, 0x54, 0xe6, 0x05, 0xde, 0x58, 0xe1,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9f, 0x73, 0x0e, 0xdf, 0x0e, 0x04, 0x00, 0x00,
}
