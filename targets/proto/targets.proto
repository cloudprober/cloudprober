// Provides all configuration necessary to list targets for a cloudprober probe.
syntax = "proto2";

package cloudprober.targets;

import "github.com/google/cloudprober/targets/gce/proto/config.proto";
import "github.com/google/cloudprober/targets/lameduck/proto/config.proto";
import "github.com/google/cloudprober/targets/rds/client/proto/config.proto";
import "github.com/google/cloudprober/targets/rtc/proto/config.proto";

message TargetsDef {
  oneof type {
    // Static host names, for example:
    // host_name: "www.google.com,8.8.8.8,en.wikipedia.org"
    string host_names = 1;

    // Shared targets are accessed through their names.
    // Example:
    // shared_targets {
    //   name:"backend-vms"
    //   targets {
    //     rds_targets {
    //       ..
    //     }
    //   }
    // }
    //
    // probe {
    //   targets {
    //     shared_targets: "backend-vms"
    //   }
    // }
    string shared_targets = 5;

    // GCE targets: instances and forwarding_rules, for example:
    // gce_targets {
    //   instances {}
    // }
    gce.TargetsConf gce_targets = 2;

    // ResourceDiscovery service based targets.
    // Example:
    // rds_targets {
    //   server_addr: "rds.internal:9314"
    //   request {
    //     provider: "gcp"
    //     resource_path: "gce_instances/{{.project}}"
    //     filter {
    //       key: "name"
    //       value: ".*backend.*"
    //     }
    //   }
    // }
    rds.ClientConf rds_targets = 3;

    // Targets stored in Runtime Config variables (Deprecated).
    // RTC targets are now deprecated (as of v0.10.4). Please don't use them for
    // new use cases.
    rtc.TargetsConf rtc_targets = 4;

    // Empty targets to meet the probe definition requirement where there are
    // actually no targets, for example in case of some external probes.
    DummyTargets dummy_targets = 20;
  }

  // Regex to apply on the targets.
  optional string regex = 21;

  // Exclude lameducks. Lameduck targets can be set through RTC (realtime
  // configurator) service. This functionality works only if lame_duck_options
  // are specified.
  optional bool exclude_lameducks = 22 [default = true];

  // Extensions allow users to to add new targets types (for example, a targets
  // type that utilizes a custom protocol) in a systematic manner.
  extensions 200 to max;
}

// DummyTargets represent empty targets, which are useful for external
// probes that do not have any "proper" targets.  Such as ilbprober.
message DummyTargets {}

// Global targets options. These options are independent of the per-probe
// targets which are defined by the "Targets" type above.
//
// Currently these options are used only for GCE targets to control things like
// how often to re-evaluate the targets and whether to check for lame ducks or
// not.
message GlobalTargetsOptions {
  // GCE targets options.
  optional gce.GlobalOptions global_gce_targets_options = 1;

  // Lame duck options. If provided, targets module checks for the lame duck
  // targets and removes them from the targets list.
  optional lameduck.Options lame_duck_options = 2;
}
