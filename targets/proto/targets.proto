// Provides all configuration necessary to list targets for a cloudprober probe.
syntax = "proto2";

package cloudprober.targets;

import "github.com/cloudprober/cloudprober/internal/rds/client/proto/config.proto";
import "github.com/cloudprober/cloudprober/internal/rds/proto/rds.proto";
import "github.com/cloudprober/cloudprober/targets/file/proto/config.proto";
import "github.com/cloudprober/cloudprober/targets/gce/proto/config.proto";
import "github.com/cloudprober/cloudprober/targets/lameduck/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/targets/proto";

message RDSTargets {
  // RDS server options, for example:
  // rds_server_options {
  //   server_address: "rds-server.xyz:9314"
  //   oauth_config: {
  //     ...
  //   }
  // }
  optional rds.ClientConf.ServerOptions rds_server_options = 1;

  // Resource path specifies the resources to return. Resources paths have the
  // following format:
  // <resource_provider>://<resource_type>/<additional_params>
  //
  // Examples:
  // For GCE instances in projectA: "gcp://gce_instances/<projectA>"
  // Kubernetes Pods : "k8s://pods"
  optional string resource_path = 2;

  // Filters to filter resources by.
  repeated rds.Filter filter = 3;

  // IP config to specify the IP address to pick for a resource.
  optional rds.IPConfig ip_config = 4;
}

message K8sTargets {
  // Targets namespace. If this field is unset, we select resources from all
  // namespaces.
  optional string namespace = 1;

  // labelSelector uses the same format as kubernetes API calls. 
  // Example:
  //   labelSelector: "k8s-app"       # label k8s-app exists
  //   labelSelector: "role=frontend" # label role=frontend
  //   labelSelector: "!canary"       # canary label doesn't exist
  repeated string labelSelector = 2;

  // Which resources to target. If value is not empty (""), we use it as a
  // regex for resource names.
  // Example:
  //   services: ""             // All services.
  //   endpoints: ".*-service"  // Endpoints ending with "service".
  oneof resources {
    string services = 3;
    string endpoints = 4;
    string ingresses = 5;
    string pods = 6;
  }

  // portFilter can be used to filter resources by port name. This is useful
  // for resources like endpoints and services, where each resource may have
  // multiple ports, and we may hit just a subset of those ports. portFilter
  // takes a regex -- we apply it on port names if port name is available,
  // otherwise we apply it port numbers.
  // Example: ".*-dns", "metrics", ".*-service", etc.
  optional string portFilter = 10;

  // How often to re-check k8s API servers. Note this field will be irrelevant
  // when (and if) we move to the watch API. Default is 30s.
  optional int32 re_eval_sec = 19;

  optional rds.ClientConf.ServerOptions rds_server_options = 20;
}

message Endpoint {
  // Endpoint name. Metrics for a target are identified by a combination of
  // endpoint name and port name, if specified.
  required string name = 1;

  // Optional IP address. If not specified, endpoint name is DNS resolved.
  optional string ip = 2;

  // Endpoint port. If specified, this port will be used by the port-based
  // probes (e.g.  TCP, HTTP), if probe's configuration doesn't specify a port.
  optional int32 port = 3;

  // HTTP probe URL. If provided, this field is used by the HTTP probe, if
  // probe configuration itself doesn't specify URL fields.
  optional string url = 4;

  // Endpoint labels. These labels can be exported as metrics labels using the
  // `additional_label` field in the probe configuration.
  map<string, string> labels = 5;
}

message TargetsDef {
  oneof type {
    // Static host names, for example:
    // host_name: "www.google.com,8.8.8.8,en.wikipedia.org"
    string host_names = 1;

    // Shared targets are accessed through their names.
    // Example:
    // shared_targets {
    //   name:"backend-vms"
    //   targets {
    //     rds_targets {
    //       ..
    //     }
    //   }
    // }
    //
    // probe {
    //   targets {
    //     shared_targets: "backend-vms"
    //   }
    // }
    string shared_targets = 5;

    // GCE targets: instances and forwarding_rules, for example:
    // gce_targets {
    //   instances {}
    // }
    gce.TargetsConf gce_targets = 2;

    // ResourceDiscovery service based targets.
    // Example:
    // rds_targets {
    //   resource_path: "gcp://gce_instances/{{.project}}"
    //   filter {
    //     key: "name"
    //     value: ".*backend.*"
    //   }
    // }
    RDSTargets rds_targets = 3;

    // File based targets.
    // Example:
    // file_targets {
    //   file_path: "/var/run/cloudprober/vips.textpb"
    // }
    file.TargetsConf file_targets = 4;

    // K8s targets.
    // Note: k8s targets are still in the experimental phase. Their config API
    // may change in the future.
    // Example:
    // k8s {
    //   namespace: "qa"
    //   labelSelector: "k8s-app"
    //   services: ""
    // }
    K8sTargets k8s = 6;

    // Empty targets to meet the probe definition requirement where there are
    // actually no targets, for example in case of some external probes.
    DummyTargets dummy_targets = 20;
  }

  // Static endpoints. These endpoints are merged with the resources returned
  // by the targets type above.
  // Example:
  //   endpoint {
  //     name: "service-gtwy-1"
  //     ip: "10.1.18.121"
  //     port: 8080
  //     labels {
  //       key: "service"
  //       value: "products-service"
  //     }
  //   }
  //   endpoint {
  //     name: "frontend-url1"
  //     url: "https://frontend.example.com/url1"
  //   }
  repeated Endpoint endpoint = 23;

  // Regex to apply on the targets.
  optional string regex = 21;

  // Exclude lameducks. Lameduck targets can be set through RTC (realtime
  // configurator) service. This functionality works only if lame_duck_options
  // are specified.
  optional bool exclude_lameducks = 22 [default = true];

  // Extensions allow users to to add new targets types (for example, a targets
  // type that utilizes a custom protocol) in a systematic manner.
  extensions 200 to max;
}

// DummyTargets represent empty targets, which are useful for external
// probes that do not have any "proper" targets.  Such as ilbprober.
message DummyTargets {}

// Global targets options. These options are independent of the per-probe
// targets which are defined by the "Targets" type above.
//
// Currently these options are used only for GCE targets to control things like
// how often to re-evaluate the targets and whether to check for lame ducks or
// not.
message GlobalTargetsOptions {
  // RDS server address
  // Deprecated: This option is now deprecated, please use rds_server_options
  // instead.
  optional string rds_server_address = 3 [deprecated = true];

  // RDS server options, for example:
  // rds_server_options {
  //   server_address: "rds-server.xyz:9314"
  //   oauth_config: {
  //     ...
  //   }
  // }
  optional rds.ClientConf.ServerOptions rds_server_options = 4;

  // GCE targets options.
  optional gce.GlobalOptions global_gce_targets_options = 1;

  // Lame duck options. If provided, targets module checks for the lame duck
  // targets and removes them from the targets list.
  optional lameduck.Options lame_duck_options = 2;
}
