// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.5
// source: github.com/cloudprober/cloudprober/metrics/payload/proto/config.proto

package proto

import (
	proto "github.com/cloudprober/cloudprober/metrics/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeaderMetric_ValueType int32

const (
	HeaderMetric_UNDEFINED HeaderMetric_ValueType = 0
	HeaderMetric_INT       HeaderMetric_ValueType = 1
	HeaderMetric_FLOAT     HeaderMetric_ValueType = 2
	HeaderMetric_STRING    HeaderMetric_ValueType = 3
	HeaderMetric_HTTP_TIME HeaderMetric_ValueType = 4 // Parsed with Go's http.ParseTime()
)

// Enum value maps for HeaderMetric_ValueType.
var (
	HeaderMetric_ValueType_name = map[int32]string{
		0: "UNDEFINED",
		1: "INT",
		2: "FLOAT",
		3: "STRING",
		4: "HTTP_TIME",
	}
	HeaderMetric_ValueType_value = map[string]int32{
		"UNDEFINED": 0,
		"INT":       1,
		"FLOAT":     2,
		"STRING":    3,
		"HTTP_TIME": 4,
	}
)

func (x HeaderMetric_ValueType) Enum() *HeaderMetric_ValueType {
	p := new(HeaderMetric_ValueType)
	*p = x
	return p
}

func (x HeaderMetric_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderMetric_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes[0].Descriptor()
}

func (HeaderMetric_ValueType) Type() protoreflect.EnumType {
	return &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes[0]
}

func (x HeaderMetric_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *HeaderMetric_ValueType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = HeaderMetric_ValueType(num)
	return nil
}

// Deprecated: Use HeaderMetric_ValueType.Descriptor instead.
func (HeaderMetric_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP(), []int{0, 0}
}

// MetricsKind specifies whether to treat output metrics as GAUGE or
// CUMULATIVE. Default is GAUGE.
type OutputMetricsOptions_MetricsKind int32

const (
	OutputMetricsOptions_UNDEFINED  OutputMetricsOptions_MetricsKind = 0
	OutputMetricsOptions_GAUGE      OutputMetricsOptions_MetricsKind = 1
	OutputMetricsOptions_CUMULATIVE OutputMetricsOptions_MetricsKind = 2
)

// Enum value maps for OutputMetricsOptions_MetricsKind.
var (
	OutputMetricsOptions_MetricsKind_name = map[int32]string{
		0: "UNDEFINED",
		1: "GAUGE",
		2: "CUMULATIVE",
	}
	OutputMetricsOptions_MetricsKind_value = map[string]int32{
		"UNDEFINED":  0,
		"GAUGE":      1,
		"CUMULATIVE": 2,
	}
)

func (x OutputMetricsOptions_MetricsKind) Enum() *OutputMetricsOptions_MetricsKind {
	p := new(OutputMetricsOptions_MetricsKind)
	*p = x
	return p
}

func (x OutputMetricsOptions_MetricsKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OutputMetricsOptions_MetricsKind) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes[1].Descriptor()
}

func (OutputMetricsOptions_MetricsKind) Type() protoreflect.EnumType {
	return &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes[1]
}

func (x OutputMetricsOptions_MetricsKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *OutputMetricsOptions_MetricsKind) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = OutputMetricsOptions_MetricsKind(num)
	return nil
}

// Deprecated: Use OutputMetricsOptions_MetricsKind.Descriptor instead.
func (OutputMetricsOptions_MetricsKind) EnumDescriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP(), []int{2, 0}
}

type HeaderMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeaderName *string `protobuf:"bytes,1,req,name=header_name,json=headerName" json:"header_name,omitempty"`
	// By default, metric is name is the snakecase (all lowercase) version of the
	// of header_name.
	MetricName *string `protobuf:"bytes,2,opt,name=metric_name,json=metricName" json:"metric_name,omitempty"`
	// If type is not specified, it's recorded as a string.
	Type *HeaderMetric_ValueType `protobuf:"varint,3,opt,name=type,enum=cloudprober.metrics.payload.HeaderMetric_ValueType" json:"type,omitempty"`
}

func (x *HeaderMetric) Reset() {
	*x = HeaderMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMetric) ProtoMessage() {}

func (x *HeaderMetric) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMetric.ProtoReflect.Descriptor instead.
func (*HeaderMetric) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *HeaderMetric) GetHeaderName() string {
	if x != nil && x.HeaderName != nil {
		return *x.HeaderName
	}
	return ""
}

func (x *HeaderMetric) GetMetricName() string {
	if x != nil && x.MetricName != nil {
		return *x.MetricName
	}
	return ""
}

func (x *HeaderMetric) GetType() HeaderMetric_ValueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return HeaderMetric_UNDEFINED
}

type JSONMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JQ filter to extract metrics from JSON. JQ filter should extract a
	// key-value object where the key is the metric name and the value is the
	// metric value. The value can be a string, number, or a bool.
	JqFilter *string `protobuf:"bytes,1,opt,name=jq_filter,json=jqFilter" json:"jq_filter,omitempty"`
	// JQ filter to extract labels from JSON. JQ filter should extract a map of
	// type map[string]any and each entry in the map is converted to a label.
	LabelsJqFilter *string `protobuf:"bytes,4,opt,name=labels_jq_filter,json=labelsJqFilter" json:"labels_jq_filter,omitempty"`
}

func (x *JSONMetric) Reset() {
	*x = JSONMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JSONMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONMetric) ProtoMessage() {}

func (x *JSONMetric) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONMetric.ProtoReflect.Descriptor instead.
func (*JSONMetric) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *JSONMetric) GetJqFilter() string {
	if x != nil && x.JqFilter != nil {
		return *x.JqFilter
	}
	return ""
}

func (x *JSONMetric) GetLabelsJqFilter() string {
	if x != nil && x.LabelsJqFilter != nil {
		return *x.LabelsJqFilter
	}
	return ""
}

type OutputMetricsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricsKind *OutputMetricsOptions_MetricsKind `protobuf:"varint,1,opt,name=metrics_kind,json=metricsKind,enum=cloudprober.metrics.payload.OutputMetricsOptions_MetricsKind" json:"metrics_kind,omitempty"`
	// Additional labels (comma-separated) to attach to the output metrics, e.g.
	// "region=us-east1,zone=us-east1-d".
	AdditionalLabels *string `protobuf:"bytes,2,opt,name=additional_labels,json=additionalLabels" json:"additional_labels,omitempty"`
	// Whether to aggregate metrics in Cloudprober. If enabled, Cloudprober
	// will aggregate parsed metrics.
	// Note that this option is mutually exclusive with GAUGE metrics and
	// cloudprober will fail during initialization if both options are enabled.
	// This option doesn't work for header_metric and json_metric.
	AggregateInCloudprober *bool `protobuf:"varint,3,opt,name=aggregate_in_cloudprober,json=aggregateInCloudprober,def=0" json:"aggregate_in_cloudprober,omitempty"`
	// Metrics that should be treated as distributions. These metrics are present
	// in the output as comma-separated list of values. For example:
	// "op_latency 4.7,5.6,5.9,6.1,4.9".
	// To be able to build distribution from these values, these metrics should
	// be pre-configured:
	//
	//	dist_metric {
	//	  key: "op_latency"
	//	  value {
	//	    explicit_buckets: "1,2,4,8,16,32,64,128,256"
	//	  }
	//	}
	//
	// Note: This option doesn't work on header_metric and json_metric.
	DistMetric map[string]*proto.Dist `protobuf:"bytes,4,rep,name=dist_metric,json=distMetric" json:"dist_metric,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Header to metric mapping. If this mapping is defined and probe's response
	// is an HTTP response, we will extract the header value and create a metric
	// from it.
	//
	// For example, to track server date:
	//
	//	header_metric {
	//	  header_name: "date"
	//	  metric_name: "server_date"
	//	  type: HTTP_DATE
	//	}
	//
	// Note when header_metric is configured, line parsing for metric is
	// disabled.
	HeaderMetric []*HeaderMetric `protobuf:"bytes,5,rep,name=header_metric,json=headerMetric" json:"header_metric,omitempty"`
	// JSON metrics to create from a JSON output.
	// Note when json_metric is configured, line parsing for metric is
	// disabled.
	// e.g. for JSON output:
	// {"status": "ok", "data": {"latency": 1.23, "count": 10}}
	//
	//	{
	//	  jq_filter: ".data"
	//	}
	//
	//	will create metrics: "latency=1.23 count=10".
	//
	//	{
	//	  jq_filter: "{\"latency\":.data.latency, \"total\": (.data.count+1)}"
	//	  labels_jq_filter: "{\"status\": .status}"
	//	}
	//
	//	will create metrics: "labels=status=ok latency=1.23 total=11.
	JsonMetric []*JSONMetric `protobuf:"bytes,6,rep,name=json_metric,json=jsonMetric" json:"json_metric,omitempty"`
}

// Default values for OutputMetricsOptions fields.
const (
	Default_OutputMetricsOptions_AggregateInCloudprober = bool(false)
)

func (x *OutputMetricsOptions) Reset() {
	*x = OutputMetricsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputMetricsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputMetricsOptions) ProtoMessage() {}

func (x *OutputMetricsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputMetricsOptions.ProtoReflect.Descriptor instead.
func (*OutputMetricsOptions) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP(), []int{2}
}

func (x *OutputMetricsOptions) GetMetricsKind() OutputMetricsOptions_MetricsKind {
	if x != nil && x.MetricsKind != nil {
		return *x.MetricsKind
	}
	return OutputMetricsOptions_UNDEFINED
}

func (x *OutputMetricsOptions) GetAdditionalLabels() string {
	if x != nil && x.AdditionalLabels != nil {
		return *x.AdditionalLabels
	}
	return ""
}

func (x *OutputMetricsOptions) GetAggregateInCloudprober() bool {
	if x != nil && x.AggregateInCloudprober != nil {
		return *x.AggregateInCloudprober
	}
	return Default_OutputMetricsOptions_AggregateInCloudprober
}

func (x *OutputMetricsOptions) GetDistMetric() map[string]*proto.Dist {
	if x != nil {
		return x.DistMetric
	}
	return nil
}

func (x *OutputMetricsOptions) GetHeaderMetric() []*HeaderMetric {
	if x != nil {
		return x.HeaderMetric
	}
	return nil
}

func (x *OutputMetricsOptions) GetJsonMetric() []*JSONMetric {
	if x != nil {
		return x.JsonMetric
	}
	return nil
}

var File_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto protoreflect.FileDescriptor

var file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDesc = []byte{
	0x0a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72,
	0x6f, 0x62, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x1a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72,
	0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x49, 0x0a,
	0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x54, 0x54,
	0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x22, 0x53, 0x0a, 0x0a, 0x4a, 0x53, 0x4f, 0x4e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x71, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x71, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x5f, 0x6a, 0x71,
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x4a, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xf7, 0x04,
	0x0a, 0x14, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x60, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x18, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x64, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x4e, 0x0a, 0x0d, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0c, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x48, 0x0a, 0x0b, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x4a, 0x53,
	0x4f, 0x4e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x1a, 0x58, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x44,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37,
	0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x55, 0x4d, 0x55, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65,
	0x72, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x70, 0x72, 0x6f, 0x62, 0x65, 0x72, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f,
}

var (
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescOnce sync.Once
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescData = file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDesc
)

func file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescGZIP() []byte {
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescOnce.Do(func() {
		file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescData)
	})
	return file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDescData
}

var file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_goTypes = []any{
	(HeaderMetric_ValueType)(0),           // 0: cloudprober.metrics.payload.HeaderMetric.ValueType
	(OutputMetricsOptions_MetricsKind)(0), // 1: cloudprober.metrics.payload.OutputMetricsOptions.MetricsKind
	(*HeaderMetric)(nil),                  // 2: cloudprober.metrics.payload.HeaderMetric
	(*JSONMetric)(nil),                    // 3: cloudprober.metrics.payload.JSONMetric
	(*OutputMetricsOptions)(nil),          // 4: cloudprober.metrics.payload.OutputMetricsOptions
	nil,                                   // 5: cloudprober.metrics.payload.OutputMetricsOptions.DistMetricEntry
	(*proto.Dist)(nil),                    // 6: cloudprober.metrics.Dist
}
var file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_depIdxs = []int32{
	0, // 0: cloudprober.metrics.payload.HeaderMetric.type:type_name -> cloudprober.metrics.payload.HeaderMetric.ValueType
	1, // 1: cloudprober.metrics.payload.OutputMetricsOptions.metrics_kind:type_name -> cloudprober.metrics.payload.OutputMetricsOptions.MetricsKind
	5, // 2: cloudprober.metrics.payload.OutputMetricsOptions.dist_metric:type_name -> cloudprober.metrics.payload.OutputMetricsOptions.DistMetricEntry
	2, // 3: cloudprober.metrics.payload.OutputMetricsOptions.header_metric:type_name -> cloudprober.metrics.payload.HeaderMetric
	3, // 4: cloudprober.metrics.payload.OutputMetricsOptions.json_metric:type_name -> cloudprober.metrics.payload.JSONMetric
	6, // 5: cloudprober.metrics.payload.OutputMetricsOptions.DistMetricEntry.value:type_name -> cloudprober.metrics.Dist
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_init() }
func file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_init() {
	if File_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*JSONMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*OutputMetricsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_goTypes,
		DependencyIndexes: file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_depIdxs,
		EnumInfos:         file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_enumTypes,
		MessageInfos:      file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_msgTypes,
	}.Build()
	File_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto = out.File
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_rawDesc = nil
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_goTypes = nil
	file_github_com_cloudprober_cloudprober_metrics_payload_proto_config_proto_depIdxs = nil
}
