syntax = "proto2";

package cloudprober.probes.dns;

option go_package = "github.com/cloudprober/cloudprober/probes/dns/proto";

// DNS query types from https://en.wikipedia.org/wiki/List_of_DNS_record_types
enum QueryType {
  NONE = 0;
  A = 1;
  NS = 2;
  CNAME = 5;
  SOA = 6;
  PTR = 12;
  MX = 15;
  TXT = 16;
  RP = 17;
  AFSDB = 18;
  SIG = 24;
  KEY = 25;
  AAAA = 28;
  LOC = 29;
  SRV = 33;
  NAPTR = 35;
  KX = 36;
  CERT = 37;
  DNAME = 39;
  APL = 42;
  DS = 43;
  SSHFP = 44;
  IPSECKEY = 45;
  RRSIG = 46;
  NSEC = 47;
  DNSKEY = 48;
  DHCID = 49;
  NSEC3 = 50;
  NSEC3PARAM = 51;
  TLSA = 52;
  HIP = 55;
  CDS = 59;
  CDNSKEY = 60;
  OPENPGPKEY = 61;
  TKEY = 249;
  TSIG = 250;
  URI = 256;
  CAA = 257;
  TA = 32768;
  DLV = 32769;
}

enum DNSProto {
  UDP = 0;
  TCP = 1;
  TCP_TLS = 2;
}

message ProbeConf {
  // Domain to use when making DNS queries
  optional string resolved_domain = 1 [default = "www.google.com."];

  // DNS Query Type
  optional QueryType query_type = 3 [default = MX];

  // Minimum number of answers expected. Default behavior is to return success
  // if DNS response status is NOERROR.
  optional uint32 min_answers = 4 [default = 0];

  // Whether to resolve the target (target is DNS server here) before making
  // the request. If set to false, we hand over the target directly to the DNS
  // client. Otherwise, we resolve the target first to an IP address.  By
  // default we resolve first if it's a discovered resource, e.g., a k8s
  // endpoint.
  optional bool resolve_first = 5;

  // Which DNS protocol is used for resolution.
  optional DNSProto dns_proto = 97 [default = UDP];

  // Requests per probe.
  // Number of DNS requests per probe. Requests are executed concurrently and
  // each DNS request contributes to probe results. For example, if you run two
  // requests per probe, "total" counter will be incremented by 2.
  optional int32 requests_per_probe = 98 [default = 1];

  // How long to wait between two requests to the same target. Only relevant
  // if requests_per_probe is also configured.
  //
  // This value should be less than (interval - timeout) / requests_per_probe.
  // This is to ensure that all requests are executed within one probe interval
  // and all of them get sufficient time. For example, if probe interval is 2s,
  // timeout is 1s, and requests_per_probe is 10,  requests_interval_msec
  // should be less than 10ms.
  optional int32 requests_interval_msec = 99 [default = 0];
}
