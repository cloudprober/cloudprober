// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.27.5
// source: github.com/cloudprober/cloudprober/probes/grpc/proto/config.proto

package proto

import (
	proto "github.com/cloudprober/cloudprober/common/oauth/proto"
	proto1 "github.com/cloudprober/cloudprober/common/tlsconfig/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProbeConf_MethodType int32

const (
	ProbeConf_ECHO         ProbeConf_MethodType = 1
	ProbeConf_READ         ProbeConf_MethodType = 2
	ProbeConf_WRITE        ProbeConf_MethodType = 3
	ProbeConf_HEALTH_CHECK ProbeConf_MethodType = 4 // gRPC healthcheck service.
	ProbeConf_GENERIC      ProbeConf_MethodType = 5 // Generic gRPC request.
)

// Enum value maps for ProbeConf_MethodType.
var (
	ProbeConf_MethodType_name = map[int32]string{
		1: "ECHO",
		2: "READ",
		3: "WRITE",
		4: "HEALTH_CHECK",
		5: "GENERIC",
	}
	ProbeConf_MethodType_value = map[string]int32{
		"ECHO":         1,
		"READ":         2,
		"WRITE":        3,
		"HEALTH_CHECK": 4,
		"GENERIC":      5,
	}
)

func (x ProbeConf_MethodType) Enum() *ProbeConf_MethodType {
	p := new(ProbeConf_MethodType)
	*p = x
	return p
}

func (x ProbeConf_MethodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProbeConf_MethodType) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_enumTypes[0].Descriptor()
}

func (ProbeConf_MethodType) Type() protoreflect.EnumType {
	return &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_enumTypes[0]
}

func (x ProbeConf_MethodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ProbeConf_MethodType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ProbeConf_MethodType(num)
	return nil
}

// Deprecated: Use ProbeConf_MethodType.Descriptor instead.
func (ProbeConf_MethodType) EnumDescriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP(), []int{1, 0}
}

type GenericRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Protoset contains descriptor source protos generated from the *.proto
	// files. You can use protoc to generate protoset files:
	//
	//	protoc --proto_path=. --descriptor_set_out=myservice.protoset \
	//	  --include_imports my/custom/server/service.proto
	ProtosetFile *string `protobuf:"bytes,1,opt,name=protoset_file,json=protosetFile" json:"protoset_file,omitempty"`
	// Note first 3 methods are valid only if descriptor source is not set.
	//
	// Types that are valid to be assigned to RequestType:
	//
	//	*GenericRequest_ListServices
	//	*GenericRequest_ListServiceMethods
	//	*GenericRequest_DescribeServiceMethod
	//	*GenericRequest_CallServiceMethod
	RequestType isGenericRequest_RequestType `protobuf_oneof:"request_type"`
	// Request data (in JSON format) for the call_service_method request.
	Body *string `protobuf:"bytes,6,opt,name=body" json:"body,omitempty"`
	// Request body from file. This field is similar to the body field above, but
	// value is read from a file.
	BodyFile *string `protobuf:"bytes,7,opt,name=body_file,json=bodyFile" json:"body_file,omitempty"`
	// Substitute env variables in body file. It will expand environment
	// variables if you refer to them as ${VARIABLE} or $VARIABLE in the file.
	BodyFileSubstituteEnv *bool `protobuf:"varint,8,opt,name=body_file_substitute_env,json=bodyFileSubstituteEnv" json:"body_file_substitute_env,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GenericRequest) Reset() {
	*x = GenericRequest{}
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRequest) ProtoMessage() {}

func (x *GenericRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRequest.ProtoReflect.Descriptor instead.
func (*GenericRequest) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *GenericRequest) GetProtosetFile() string {
	if x != nil && x.ProtosetFile != nil {
		return *x.ProtosetFile
	}
	return ""
}

func (x *GenericRequest) GetRequestType() isGenericRequest_RequestType {
	if x != nil {
		return x.RequestType
	}
	return nil
}

func (x *GenericRequest) GetListServices() bool {
	if x != nil {
		if x, ok := x.RequestType.(*GenericRequest_ListServices); ok {
			return x.ListServices
		}
	}
	return false
}

func (x *GenericRequest) GetListServiceMethods() string {
	if x != nil {
		if x, ok := x.RequestType.(*GenericRequest_ListServiceMethods); ok {
			return x.ListServiceMethods
		}
	}
	return ""
}

func (x *GenericRequest) GetDescribeServiceMethod() string {
	if x != nil {
		if x, ok := x.RequestType.(*GenericRequest_DescribeServiceMethod); ok {
			return x.DescribeServiceMethod
		}
	}
	return ""
}

func (x *GenericRequest) GetCallServiceMethod() string {
	if x != nil {
		if x, ok := x.RequestType.(*GenericRequest_CallServiceMethod); ok {
			return x.CallServiceMethod
		}
	}
	return ""
}

func (x *GenericRequest) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *GenericRequest) GetBodyFile() string {
	if x != nil && x.BodyFile != nil {
		return *x.BodyFile
	}
	return ""
}

func (x *GenericRequest) GetBodyFileSubstituteEnv() bool {
	if x != nil && x.BodyFileSubstituteEnv != nil {
		return *x.BodyFileSubstituteEnv
	}
	return false
}

type isGenericRequest_RequestType interface {
	isGenericRequest_RequestType()
}

type GenericRequest_ListServices struct {
	// List services using reflection
	ListServices bool `protobuf:"varint,2,opt,name=list_services,json=listServices,oneof"`
}

type GenericRequest_ListServiceMethods struct {
	// List service methods using reflection.
	ListServiceMethods string `protobuf:"bytes,3,opt,name=list_service_methods,json=listServiceMethods,oneof"`
}

type GenericRequest_DescribeServiceMethod struct {
	// Describe service method using reflection.
	DescribeServiceMethod string `protobuf:"bytes,4,opt,name=describe_service_method,json=describeServiceMethod,oneof"`
}

type GenericRequest_CallServiceMethod struct {
	// Call service method. For this to succeed, you should either provide the
	// protoset file or the server should support gRPC reflection.
	// https://github.com/grpc/grpc/blob/master/doc/server-reflection.md
	CallServiceMethod string `protobuf:"bytes,5,opt,name=call_service_method,json=callServiceMethod,oneof"`
}

func (*GenericRequest_ListServices) isGenericRequest_RequestType() {}

func (*GenericRequest_ListServiceMethods) isGenericRequest_RequestType() {}

func (*GenericRequest_DescribeServiceMethod) isGenericRequest_RequestType() {}

func (*GenericRequest_CallServiceMethod) isGenericRequest_RequestType() {}

// Next tag: 14
type ProbeConf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Port for gRPC requests (Corresponding target field: port)
	// Default is 443, but if this field is not set and target has a port, either
	// discovered (e.g., k8s services, ingresses), or configured (e.g. endpoint,
	// file targets), we use target's port.
	Port *int32 `protobuf:"varint,6,opt,name=port" json:"port,omitempty"`
	// Optional oauth config. For GOOGLE_DEFAULT_CREDENTIALS, use:
	// oauth_config: { bearer_token { gce_service_account: "default" } }
	OauthConfig *proto.Config `protobuf:"bytes,1,opt,name=oauth_config,json=oauthConfig" json:"oauth_config,omitempty"`
	// If alts_config is provided, gRPC client uses ALTS for authentication and
	// encryption. For default alts configs, use:
	// alts_config: {}
	AltsConfig *ProbeConf_ALTSConfig `protobuf:"bytes,2,opt,name=alts_config,json=altsConfig" json:"alts_config,omitempty"`
	// If TLSConfig is specified, it's used for authentication.
	// Note that only one of ALTSConfig and TLSConfig can be enabled at a time.
	TlsConfig *proto1.TLSConfig `protobuf:"bytes,9,opt,name=tls_config,json=tlsConfig" json:"tls_config,omitempty"`
	// if insecure_transport is set to true, TLS will not be used.
	InsecureTransport *bool                 `protobuf:"varint,12,opt,name=insecure_transport,json=insecureTransport" json:"insecure_transport,omitempty"`
	Method            *ProbeConf_MethodType `protobuf:"varint,3,opt,name=method,enum=cloudprober.probes.grpc.ProbeConf_MethodType,def=1" json:"method,omitempty"`
	// Blob size for ECHO, READ, and WRITE methods.
	BlobSize *int32 `protobuf:"varint,4,opt,name=blob_size,json=blobSize,def=1024" json:"blob_size,omitempty"`
	// For HEALTH_CHECK, name of the service to health check.
	HealthCheckService *string `protobuf:"bytes,10,opt,name=health_check_service,json=healthCheckService" json:"health_check_service,omitempty"`
	// For HEALTH_CHECK, ignore status. By default, HEALTH_CHECK test passes
	// only if response-status is SERVING. Setting the following option makes
	// HEALTH_CHECK pass regardless of the response-status.
	HealthCheckIgnoreStatus *bool `protobuf:"varint,11,opt,name=health_check_ignore_status,json=healthCheckIgnoreStatus" json:"health_check_ignore_status,omitempty"`
	// Request definition for the GENERIC method.
	Request *GenericRequest `protobuf:"bytes,14,opt,name=request" json:"request,omitempty"`
	// Number of connections to use. Default is 2 for ECHO, READ and WRITE
	// methods for backward compatibility. For HEALTH_CHECK and GENERIC, default
	// is 1.
	NumConns *int32 `protobuf:"varint,5,opt,name=num_conns,json=numConns" json:"num_conns,omitempty"`
	// If disable_reuse_conn is set to true, connections will not be reused. This
	// is useful when you service is behind a loadbalancer and you want to hit
	// different instances every probe cycle.
	DisableReuseConn *bool `protobuf:"varint,15,opt,name=disable_reuse_conn,json=disableReuseConn" json:"disable_reuse_conn,omitempty"`
	// Default load balancing config in JSON format. This config only matters
	// if we are using client side load balancing (less common) and LB resolver
	// doesn't provide a service config[1](most advanced load balancers, like
	// xds, do). This field is useful if you have a DNS based LB setup where DNS
	// resolution simply returns a list of IPs (e.g. k8s headless service[2]).
	//
	// Example:
	// default_lb_config: "[{ \"round_robin\": {} }]"
	//
	// [1]: https://github.com/grpc/grpc/blob/master/doc/service_config.md
	// [2]: https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
	DefaultLbConfig *string `protobuf:"bytes,16,opt,name=default_lb_config,json=defaultLbConfig" json:"default_lb_config,omitempty"`
	// If connect_timeout is not specified, reuse probe timeout. Note that this
	// timeout will have an impact only if it is less than the probe timeout.
	ConnectTimeoutMsec *int32 `protobuf:"varint,7,opt,name=connect_timeout_msec,json=connectTimeoutMsec" json:"connect_timeout_msec,omitempty"`
	// URI scheme allows gRPC to use different resolvers
	// Example URI scheme: "google-c2p:///"
	// See https://github.com/grpc/grpc/blob/master/doc/naming.md for more details
	UriScheme     *string             `protobuf:"bytes,8,opt,name=uri_scheme,json=uriScheme,def=dns:///" json:"uri_scheme,omitempty"`
	Headers       []*ProbeConf_Header `protobuf:"bytes,13,rep,name=headers" json:"headers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

// Default values for ProbeConf fields.
const (
	Default_ProbeConf_Method    = ProbeConf_ECHO
	Default_ProbeConf_BlobSize  = int32(1024)
	Default_ProbeConf_UriScheme = string("dns:///")
)

func (x *ProbeConf) Reset() {
	*x = ProbeConf{}
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf) ProtoMessage() {}

func (x *ProbeConf) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf.ProtoReflect.Descriptor instead.
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *ProbeConf) GetPort() int32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *ProbeConf) GetOauthConfig() *proto.Config {
	if x != nil {
		return x.OauthConfig
	}
	return nil
}

func (x *ProbeConf) GetAltsConfig() *ProbeConf_ALTSConfig {
	if x != nil {
		return x.AltsConfig
	}
	return nil
}

func (x *ProbeConf) GetTlsConfig() *proto1.TLSConfig {
	if x != nil {
		return x.TlsConfig
	}
	return nil
}

func (x *ProbeConf) GetInsecureTransport() bool {
	if x != nil && x.InsecureTransport != nil {
		return *x.InsecureTransport
	}
	return false
}

func (x *ProbeConf) GetMethod() ProbeConf_MethodType {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return Default_ProbeConf_Method
}

func (x *ProbeConf) GetBlobSize() int32 {
	if x != nil && x.BlobSize != nil {
		return *x.BlobSize
	}
	return Default_ProbeConf_BlobSize
}

func (x *ProbeConf) GetHealthCheckService() string {
	if x != nil && x.HealthCheckService != nil {
		return *x.HealthCheckService
	}
	return ""
}

func (x *ProbeConf) GetHealthCheckIgnoreStatus() bool {
	if x != nil && x.HealthCheckIgnoreStatus != nil {
		return *x.HealthCheckIgnoreStatus
	}
	return false
}

func (x *ProbeConf) GetRequest() *GenericRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ProbeConf) GetNumConns() int32 {
	if x != nil && x.NumConns != nil {
		return *x.NumConns
	}
	return 0
}

func (x *ProbeConf) GetDisableReuseConn() bool {
	if x != nil && x.DisableReuseConn != nil {
		return *x.DisableReuseConn
	}
	return false
}

func (x *ProbeConf) GetDefaultLbConfig() string {
	if x != nil && x.DefaultLbConfig != nil {
		return *x.DefaultLbConfig
	}
	return ""
}

func (x *ProbeConf) GetConnectTimeoutMsec() int32 {
	if x != nil && x.ConnectTimeoutMsec != nil {
		return *x.ConnectTimeoutMsec
	}
	return 0
}

func (x *ProbeConf) GetUriScheme() string {
	if x != nil && x.UriScheme != nil {
		return *x.UriScheme
	}
	return Default_ProbeConf_UriScheme
}

func (x *ProbeConf) GetHeaders() []*ProbeConf_Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

// ALTS is a gRPC security method supported by some Google services.
// If enabled, peers, with the help of a handshaker service (e.g. metadata
// server of GCE instances), use credentials attached to the service accounts
// to authenticate each other. See
// https://cloud.google.com/security/encryption-in-transit/#service_integrity_encryption
// for more details.
type ProbeConf_ALTSConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If provided, ALTS verifies that peer is using one of the given service
	// accounts.
	TargetServiceAccount []string `protobuf:"bytes,1,rep,name=target_service_account,json=targetServiceAccount" json:"target_service_account,omitempty"`
	// Handshaker service address. Default is to use the local metadata server.
	// For most of the ALTS use cases, default address should be okay.
	HandshakerServiceAddress *string `protobuf:"bytes,2,opt,name=handshaker_service_address,json=handshakerServiceAddress" json:"handshaker_service_address,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *ProbeConf_ALTSConfig) Reset() {
	*x = ProbeConf_ALTSConfig{}
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeConf_ALTSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf_ALTSConfig) ProtoMessage() {}

func (x *ProbeConf_ALTSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf_ALTSConfig.ProtoReflect.Descriptor instead.
func (*ProbeConf_ALTSConfig) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ProbeConf_ALTSConfig) GetTargetServiceAccount() []string {
	if x != nil {
		return x.TargetServiceAccount
	}
	return nil
}

func (x *ProbeConf_ALTSConfig) GetHandshakerServiceAddress() string {
	if x != nil && x.HandshakerServiceAddress != nil {
		return *x.HandshakerServiceAddress
	}
	return ""
}

type ProbeConf_Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          *string                `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value         *string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProbeConf_Header) Reset() {
	*x = ProbeConf_Header{}
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProbeConf_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProbeConf_Header) ProtoMessage() {}

func (x *ProbeConf_Header) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProbeConf_Header.ProtoReflect.Descriptor instead.
func (*ProbeConf_Header) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ProbeConf_Header) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ProbeConf_Header) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

var File_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto protoreflect.FileDescriptor

const file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDesc = "" +
	"\n" +
	"Agithub.com/cloudprober/cloudprober/probes/grpc/proto/config.proto\x12\x17cloudprober.probes.grpc\x1aBgithub.com/cloudprober/cloudprober/common/oauth/proto/config.proto\x1aFgithub.com/cloudprober/cloudprober/common/tlsconfig/proto/config.proto\"\xf6\x02\n" +
	"\x0eGenericRequest\x12#\n" +
	"\rprotoset_file\x18\x01 \x01(\tR\fprotosetFile\x12%\n" +
	"\rlist_services\x18\x02 \x01(\bH\x00R\flistServices\x122\n" +
	"\x14list_service_methods\x18\x03 \x01(\tH\x00R\x12listServiceMethods\x128\n" +
	"\x17describe_service_method\x18\x04 \x01(\tH\x00R\x15describeServiceMethod\x120\n" +
	"\x13call_service_method\x18\x05 \x01(\tH\x00R\x11callServiceMethod\x12\x12\n" +
	"\x04body\x18\x06 \x01(\tR\x04body\x12\x1b\n" +
	"\tbody_file\x18\a \x01(\tR\bbodyFile\x127\n" +
	"\x18body_file_substitute_env\x18\b \x01(\bR\x15bodyFileSubstituteEnvB\x0e\n" +
	"\frequest_type\"\xd8\b\n" +
	"\tProbeConf\x12\x12\n" +
	"\x04port\x18\x06 \x01(\x05R\x04port\x12<\n" +
	"\foauth_config\x18\x01 \x01(\v2\x19.cloudprober.oauth.ConfigR\voauthConfig\x12N\n" +
	"\valts_config\x18\x02 \x01(\v2-.cloudprober.probes.grpc.ProbeConf.ALTSConfigR\n" +
	"altsConfig\x12?\n" +
	"\n" +
	"tls_config\x18\t \x01(\v2 .cloudprober.tlsconfig.TLSConfigR\ttlsConfig\x12-\n" +
	"\x12insecure_transport\x18\f \x01(\bR\x11insecureTransport\x12K\n" +
	"\x06method\x18\x03 \x01(\x0e2-.cloudprober.probes.grpc.ProbeConf.MethodType:\x04ECHOR\x06method\x12!\n" +
	"\tblob_size\x18\x04 \x01(\x05:\x041024R\bblobSize\x120\n" +
	"\x14health_check_service\x18\n" +
	" \x01(\tR\x12healthCheckService\x12;\n" +
	"\x1ahealth_check_ignore_status\x18\v \x01(\bR\x17healthCheckIgnoreStatus\x12A\n" +
	"\arequest\x18\x0e \x01(\v2'.cloudprober.probes.grpc.GenericRequestR\arequest\x12\x1b\n" +
	"\tnum_conns\x18\x05 \x01(\x05R\bnumConns\x12,\n" +
	"\x12disable_reuse_conn\x18\x0f \x01(\bR\x10disableReuseConn\x12*\n" +
	"\x11default_lb_config\x18\x10 \x01(\tR\x0fdefaultLbConfig\x120\n" +
	"\x14connect_timeout_msec\x18\a \x01(\x05R\x12connectTimeoutMsec\x12&\n" +
	"\n" +
	"uri_scheme\x18\b \x01(\t:\adns:///R\turiScheme\x12C\n" +
	"\aheaders\x18\r \x03(\v2).cloudprober.probes.grpc.ProbeConf.HeaderR\aheaders\x1a\x80\x01\n" +
	"\n" +
	"ALTSConfig\x124\n" +
	"\x16target_service_account\x18\x01 \x03(\tR\x14targetServiceAccount\x12<\n" +
	"\x1ahandshaker_service_address\x18\x02 \x01(\tR\x18handshakerServiceAddress\x1a2\n" +
	"\x06Header\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value\"J\n" +
	"\n" +
	"MethodType\x12\b\n" +
	"\x04ECHO\x10\x01\x12\b\n" +
	"\x04READ\x10\x02\x12\t\n" +
	"\x05WRITE\x10\x03\x12\x10\n" +
	"\fHEALTH_CHECK\x10\x04\x12\v\n" +
	"\aGENERIC\x10\x05B6Z4github.com/cloudprober/cloudprober/probes/grpc/proto"

var (
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescOnce sync.Once
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescData []byte
)

func file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescGZIP() []byte {
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescOnce.Do(func() {
		file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDesc), len(file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDesc)))
	})
	return file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDescData
}

var file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_goTypes = []any{
	(ProbeConf_MethodType)(0),    // 0: cloudprober.probes.grpc.ProbeConf.MethodType
	(*GenericRequest)(nil),       // 1: cloudprober.probes.grpc.GenericRequest
	(*ProbeConf)(nil),            // 2: cloudprober.probes.grpc.ProbeConf
	(*ProbeConf_ALTSConfig)(nil), // 3: cloudprober.probes.grpc.ProbeConf.ALTSConfig
	(*ProbeConf_Header)(nil),     // 4: cloudprober.probes.grpc.ProbeConf.Header
	(*proto.Config)(nil),         // 5: cloudprober.oauth.Config
	(*proto1.TLSConfig)(nil),     // 6: cloudprober.tlsconfig.TLSConfig
}
var file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_depIdxs = []int32{
	5, // 0: cloudprober.probes.grpc.ProbeConf.oauth_config:type_name -> cloudprober.oauth.Config
	3, // 1: cloudprober.probes.grpc.ProbeConf.alts_config:type_name -> cloudprober.probes.grpc.ProbeConf.ALTSConfig
	6, // 2: cloudprober.probes.grpc.ProbeConf.tls_config:type_name -> cloudprober.tlsconfig.TLSConfig
	0, // 3: cloudprober.probes.grpc.ProbeConf.method:type_name -> cloudprober.probes.grpc.ProbeConf.MethodType
	1, // 4: cloudprober.probes.grpc.ProbeConf.request:type_name -> cloudprober.probes.grpc.GenericRequest
	4, // 5: cloudprober.probes.grpc.ProbeConf.headers:type_name -> cloudprober.probes.grpc.ProbeConf.Header
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_init() }
func file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_init() {
	if File_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto != nil {
		return
	}
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes[0].OneofWrappers = []any{
		(*GenericRequest_ListServices)(nil),
		(*GenericRequest_ListServiceMethods)(nil),
		(*GenericRequest_DescribeServiceMethod)(nil),
		(*GenericRequest_CallServiceMethod)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDesc), len(file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_goTypes,
		DependencyIndexes: file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_depIdxs,
		EnumInfos:         file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_enumTypes,
		MessageInfos:      file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_msgTypes,
	}.Build()
	File_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto = out.File
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_goTypes = nil
	file_github_com_cloudprober_cloudprober_probes_grpc_proto_config_proto_depIdxs = nil
}
