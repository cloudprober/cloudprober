syntax = "proto2";

package cloudprober.probes.grpc;

import "github.com/cloudprober/cloudprober/internal/oauth/proto/config.proto";
import "github.com/cloudprober/cloudprober/internal/tlsconfig/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/grpc/proto";

message GenericRequest {
  // Protoset contains descriptor source protos generated from the *.proto
  // files. You can use protoc to generate protoset files:
  //   protoc --proto_path=. --descriptor_set_out=myservice.protoset \
  //     --include_imports my/custom/server/service.proto
  optional string protoset_file = 1;

  // Note first 3 methods are valid only if descriptor source is not set.
  oneof request_type {
    // List services using reflection
    bool list_services = 2;

    // List service methods using reflection.
    string list_service_methods = 3;

    // Describe service method using reflection.
    string describe_service_method = 4;

    // Call service method. For this to succeed, you should either provide the
    // protoset file or the server should support gRPC reflection.
    // https://github.com/grpc/grpc/blob/master/doc/server-reflection.md
    string call_service_method = 5;
  }

  // Request data (in JSON format) for the call_service_method request.
  optional string body = 6;
}

// Next tag: 14
message ProbeConf {
  // Optional oauth config. For GOOGLE_DEFAULT_CREDENTIALS, use:
  // oauth_config: { bearer_token { gce_service_account: "default" } }
  optional oauth.Config oauth_config = 1;

  // ALTS is a gRPC security method supported by some Google services.
  // If enabled, peers, with the help of a handshaker service (e.g. metadata
  // server of GCE instances), use credentials attached to the service accounts
  // to authenticate each other. See
  // https://cloud.google.com/security/encryption-in-transit/#service_integrity_encryption
  // for more details.
  message ALTSConfig {
    // If provided, ALTS verifies that peer is using one of the given service
    // accounts.
    repeated string target_service_account = 1;

    // Handshaker service address. Default is to use the local metadata server.
    // For most of the ALTS use cases, default address should be okay.
    optional string handshaker_service_address = 2;
  }
  // If alts_config is provided, gRPC client uses ALTS for authentication and
  // encryption. For default alts configs, use:
  // alts_config: {}
  optional ALTSConfig alts_config = 2;

  // If TLSConfig is specified, it's used for authentication.
  // Note that only one of ALTSConfig and TLSConfig can be enabled at a time.
  optional tlsconfig.TLSConfig tls_config = 9;

  // if insecure_transport is set to true, TLS will not be used.
  optional bool insecure_transport = 12;

  enum MethodType {
    ECHO = 1;
    READ = 2;
    WRITE = 3;
    HEALTH_CHECK = 4;   // gRPC healthcheck service.
    GENERIC = 5;        // Generic gRPC request.
  }
  optional MethodType method = 3 [default = ECHO];

  // Blob size for ECHO, READ, and WRITE methods.
  optional int32 blob_size = 4 [default = 1024];

  // For HEALTH_CHECK, name of the service to health check.
  optional string health_check_service = 10;

  // For HEALTH_CHECK, ignore status. By default, HEALTH_CHECK test passes
  // only if response-status is SERVING. Setting the following option makes
  // HEALTH_CHECK pass regardless of the response-status.
  optional bool health_check_ignore_status = 11;

  // Request definition for the GENERIC method.
  optional GenericRequest request = 14;

  // Number of connections to use. Default is 2 for ECHO, READ and WRITE
  // methods for backward compatibility. For HEALTH_CHECK and GENERIC, default
  // is 1.
  optional int32 num_conns = 5;
  optional bool keep_alive = 6 [default = true];

  // If connect_timeout is not specified, reuse probe timeout.
  optional int32 connect_timeout_msec = 7;

  // URI scheme allows gRPC to use different resolvers
  // Example URI scheme: "google-c2p:///"
  // See https://github.com/grpc/grpc/blob/master/doc/naming.md for more details
  optional string uri_scheme = 8;
  
  message Header {
    optional string name = 1;
    optional string value = 2;
  }
  
  repeated Header headers = 13;
}
