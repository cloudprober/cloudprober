syntax = "proto2";

package cloudprober.probes;

import "github.com/cloudprober/cloudprober/metrics/proto/dist.proto";
import "github.com/cloudprober/cloudprober/internal/alerting/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/dns/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/external/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/grpc/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/http/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/ping/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/tcp/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/udp/proto/config.proto";
import "github.com/cloudprober/cloudprober/probes/udplistener/proto/config.proto";
import "github.com/cloudprober/cloudprober/targets/proto/targets.proto";
import "github.com/cloudprober/cloudprober/internal/validators/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/proto";

// Next tag: 101
message ProbeDef {
  // Probe name. It should be unique across all probes.
  required string name = 1;

  enum Type {
    PING = 0;
    HTTP = 1;
    DNS = 2;
    EXTERNAL = 3;
    UDP = 4;
    UDP_LISTENER = 5;
    GRPC = 6;
    TCP = 7;

    // One of the extension probe types. See "extensions" below for more
    // details.
    EXTENSION = 98;

    // USER_DEFINED probe type is for a one off probe that you want to compile
    // into cloudprober, but you don't expect it to be reused. If you expect
    // it to be reused, you should consider adding it using the extensions
    // mechanism.
    USER_DEFINED = 99;
  }
  required Type type = 2;

  // Interval between two probe runs in milliseconds.
  // Only one of "interval" and "inteval_msec" should be defined.
  // Default interval is 2s.
  optional int32 interval_msec = 4;

  // Interval between two probe runs in string format, e.g. 10s.
  // Only one of "interval" and "inteval_msec" should be defined.
  // Default interval is 2s.
  optional string interval = 16;

  // Timeout for each probe in milliseconds
  // Only one of "timeout" and "timeout_msec" should be defined.
  // Default timeout is 1s.
  optional int32 timeout_msec = 5;

  // Timeout for each probe in string format, e.g. 10s.
  // Only one of "timeout" and "timeout_msec" should be defined.
  // Default timeout is 1s.
  optional string timeout = 17;

  // Targets for the probe. Targets are required for all probes except
  // for external, user_defined, and extension probe types.
  optional targets.TargetsDef targets = 6;

  // Latency distribution. If specified, latency is stored as a distribution.
  optional metrics.Dist latency_distribution = 7;

  // Latency unit. Any string that's parseable by time.ParseDuration.
  // Valid values: "ns", "us" (or "Âµs"), "ms", "s", "m", "h".
  optional string latency_unit = 8 [default = "us"];

  // Latency metric name. You may want to change the latency metric name, if:
  // you're using latency_distribution for some probes, and regular metric for
  // other probes, and you want to differentiate between the two.
  // For example:
  //   probe {
  //     name: "web1_latency"
  //     latency_distribution: {...}
  //     latency_metric_name: "latency_dist"
  //     ...
  //   }
  //   probe {
  //     name: "app1"
  //     ...
  //   }
  optional string latency_metric_name = 15 [default = "latency"];

  // Validators for this probe. Validators are run on the data returned by the
  // probe. See https://cloudprober.org/docs/how-to/validators/ for more info.
  repeated validators.Validator validator = 9;

  // Set the source IP to send packets from, either by providing an IP address
  // directly, or a network interface.
  oneof source_ip_config {
    string source_ip = 10;
    string source_interface = 11;
  }

  // IP version to use for networking probes. If specified, this is used while
  // 1) resolving a target, 2) picking the correct IP for the source IP if
  // source_interface option is provided, and 3) to craft the packet correctly
  // for PING probes.
  //
  // If ip_version is not configured but source_ip is provided, we get
  // ip_version from it. If both are  confgiured, an error is returned if there
  // is a conflict between the two.
  //
  // If left unspecified and both addresses are available in resolve call or on
  // source interface, IPv4 is preferred.
  // Future work: provide an option to prefer IPv4 and IPv6 explicitly.
  enum IPVersion {
    IP_VERSION_UNSPECIFIED = 0;
    IPV4 = 1;
    IPV6 = 2;
  }
  optional IPVersion ip_version = 12;

  // How often to export stats. Probes usually run at a higher frequency (e.g.
  // every second); stats from individual probes are aggregated within
  // cloudprober until exported. In most cases, users don't need to change the
  // default.
  //
  // By default this field is set in the following way:
  // For all probes except UDP:
  //   stats_export_interval=max(interval, 10s)
  // For UDP:
  //   stats_export_interval=max(2*max(interval, timeout), 10s)
  optional int32 stats_export_interval_msec = 13;

  // Additional labels to add to the probe results. Label's value can either be
  // static or can be derived from target's labels.
  //
  // Example:
  //   additional_label {
  //     key: "app"
  //     value: "@target.label.app@"
  //   }
  // (More detailed example at: examples/additional_label/cloudprober.cfg)
  repeated AdditionalLabel additional_label = 14;

  // (Experimental) If set, test is inversed, i.e. we count it as success if
  // target doesn't respond. This is useful, for example, that your firewall is
  // working as expected.
  //
  // This is currently implemented only by PING and TCP probes.
  // Note: This field is currently experimental, and may change in future.
  optional bool negative_test = 18;

  // Alerts configuration. If specified, cloudprober will generate alerts on
  // probe failures. You can specify multiple alerts.
  // Example:
  //  alert {
  //    name: "alert1"
  //    condition {...}
  //    notify {
  //      pagerduty { ...}
  //    }
  //  }
  //  alert {
  //    name: "alert2"
  //    notify { ... }
  //  }
  repeated alerting.AlertConf alert = 19;

  oneof probe {
    ping.ProbeConf ping_probe = 20;
    http.ProbeConf http_probe = 21;
    dns.ProbeConf dns_probe = 22;
    external.ProbeConf external_probe = 23;
    udp.ProbeConf udp_probe = 24;
    udplistener.ProbeConf udp_listener_probe = 25;
    grpc.ProbeConf grpc_probe = 26;
    tcp.ProbeConf tcp_probe = 27;
    // This field's contents are passed on to the user defined probe,
    // registered for this probe's name through probes.RegisterUserDefined().
    string user_defined_probe = 99;
  }

  // Which machines this probe should run on. If defined, cloudprober will run
  // this probe only if machine's hostname matches this value. This is useful
  // for large deployments, where you may want to use the same prober config
  // everywhere but run this probe only on a subset of machines.
  optional string run_on = 3;

  // Schedule for the probe. You can use a schedule to specify when a probe
  // should or should not run. This is useful for running probes only during
  // business hours.
  //
  // You can specify multiple schedules. Probe will not run if any of the 
  // "DISABLE" schedules are active. If both "ENABLE" and "DISABLE" schedules
  // overlap, "DISABLE" takes precedence.
  //
  // For example, to disable a probe during weekends and on Tuesday between 7pm
  // and 8pm, e.g. for rollouts:
  //   schdule {
  //     type: DISABLE
  //     start_weekday: FRIDAY
  //     start_time: "20:00"
  //     end_weekday: SUNDAY
  //     end_time: "17:00" 
  //     timezone: "America/New_York"
  //   }
  //   schdule {
  //     type: DISABLE
  //     start_weekday: TUESDAY
  //     start_time: "19:00"
  //     end_weekday: TUESDAY
  //     end_time: "20:00" 
  //     timezone: "America/New_York"
  //   }
  repeated Schedule schedule = 101;

  // Debug options. Currently only used to enable logging metrics.
  optional DebugOptions debug_options = 100;

  // Extensions allow users to to add new probe types (for example, a probe type
  // that utilizes a custom protocol) in a systematic manner.
  extensions 200 to max;
}

message AdditionalLabel {
  required string key = 1;

  // Value can either be a static value or can be derived from target's labels.
  // To get value from target's labels, use target.labels.<target's label key>
  // as value.
  required string value = 2;
}

message Schedule {
  enum Weekday {
    EVERYDAY = 0;
    SUNDAY = 1;
    MONDAY = 2;
    TUESDAY = 3;
    WEDNESDAY = 4;
    THURSDAY = 5;
    FRIDAY = 6;
    SATURDAY = 7;
  }

  enum ScheduleType {
    ScheduleType_UNSPECIFIED = 0;
    ENABLE = 1;
    DISABLE = 2;
  }

  required ScheduleType type = 1;

  // Period start weekday. If not specified, it defaults to EVERYDAY.
  optional Weekday start_weekday = 2 [default = EVERYDAY];

  // Start time in 24 hour HH:MM format.
  optional string start_time = 3 [default = "00:00"];

  // Period end weekday. If not specified, it defaults to EVERYDAY.
  optional Weekday end_weekday = 4 [default = EVERYDAY];

  // End time in 24 hour HH:MM format.
  optional string end_time = 5 [default = "23:59"];

  // Timezone in which the probe should run. If not specified, it defaults to
  // UTC. Example: "America/New_York"
  optional string timezone = 6 [default = "UTC"];
}

message DebugOptions {
  // Whether to log metrics or not.
  optional bool log_metrics = 1;
}
