syntax = "proto2";

package cloudprober.probes.browser;

option go_package = "github.com/cloudprober/cloudprober/probes/browser/proto";

message TestMetricsOptions {
    optional bool disable_test_metrics = 1;
    optional bool disable_aggregation = 2;
    optional bool enable_step_metrics = 3;
}

message ProbeConf {
    // Path to the playwright test spec file. We'll search for it in the the
    // current working directory and the workdir directory.
    optional string test_spec_file = 1;

    // Inline playwright test spec.
    optional string test_spec = 2;

    // Workdir is path to the working directory. It should be writable. If not
    // specified, we try to create a temporary directory. All the output files
    // and reports are stored under <workdir>/output/<runid_timestamp>.
    // If you need to be able access the output files, you should set this 
    // field to a persistent location, e.g. a persistent volume.
    optional string workdir = 3;

    // Path to the playwright installation. We execute tests from this location.
    optional string playwright_dir = 4 [default = "/playwright"];

    // Whether to enable screenshots for successful tests as well.
    // Note that screenshots are always enabled for failed tests, and you can
    // always save screenshots explicitly in the test spec.
    optional bool enable_screenshots_for_success = 5 [default = false];

    // Traces are expensive and can slow down the test. We recommend to enable
    // this only when needed.
    optional bool enable_traces = 6 [default = false];

    // By default, we export all test metrica as counters. You can change how
    // metrics are exported by setting the following options.
    optional TestMetricsOptions test_metrics_options = 7;
    
    // Requests per probe.
    // Number of DNS requests per probe. Requests are executed concurrently and
    // each DNS request contributes to probe results. For example, if you run two
    // requests per probe, "total" counter will be incremented by 2.
    optional int32 requests_per_probe = 98 [default = 1];

    // How long to wait between two requests to the same target. Only relevant
    // if requests_per_probe is also configured.
    //
    // This value should be less than (interval - timeout) / requests_per_probe.
    // This is to ensure that all requests are executed within one probe interval
    // and all of them get sufficient time. For example, if probe interval is 2s,
    // timeout is 1s, and requests_per_probe is 10,  requests_interval_msec
    // should be less than 10ms.
    optional int32 requests_interval_msec = 99 [default = 0];
}