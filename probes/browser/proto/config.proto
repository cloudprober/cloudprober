syntax = "proto2";

package cloudprober.probes.browser;

import "github.com/cloudprober/cloudprober/probes/browser/artifacts/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/browser/proto";

message TestMetricsOptions {
    optional bool disable_test_metrics = 1;
    optional bool disable_aggregation = 2;
    optional bool enable_step_metrics = 3;
}

message TestSpecFilter {
    // Tests to include. Default is to include all tests matched by test spec.
    // This corresponds to the playwright --grep flag.
    //
    // Example:
    // include: "login|logout"  // include tests with login or logout in title
    // include: "@smoke"        // include tests with @smoke tag
    optional string include = 1;

    // Tests to exclude.
    // This corresponds to the playwright --grep-invert flag.
    //
    // Example:
    // exclude: "@draft|@debug"  // exclude tests with @draft or @debug tag
    optional string exclude = 2;
}

message ProbeConf {
    // Playwright test specs to run.
    //
    // Each entry in test_spec is interpreted as follows:
    //   - If it contains one of the following regex characters:
    //     ^,$,*,|,?,+,(),[],{}, it is treated as a regex pattern and passed
    //     directly to Playwright.
    //   - Otherwise, it is treated as a filename (relative to test_dir or as
    //     an absolute path if specified), and will be wrapped as a regex
    //     matching the full path to that file.
    //
    // Examples:
    //   test_spec: "test_login.ts" // runs tests in file {test_dir}/test_login.ts
    //   test_spec: "sm*.ts"        // runs tests in files matching {test_dir}/sm*.ts
    //
    // If test_spec is not set, all test files in test_dir (default: config
    // file directory) are executed.
    repeated string test_spec = 1;

    // Test directory. This is the directory where test specs are located.
    // Default test_dir is config file directory ("{{configDir}}").
    optional string test_dir = 2;

    // Test spec filter. This field corresponds to the grep functionality of
    // playwright.
    //
    // Example:
    //   {
    //     include: "web|ui"  // include tests with "web" or "ui" in title
    //     exclude: "@draft"  // exclude tests with @draft tag
    //   }
    optional TestSpecFilter test_spec_filter = 3;

    // Workdir is path to the working directory. It should be writable. If not
    // specified, we try to create a temporary directory. All the output files
    // and reports are stored under <workdir>/output/.
    // If you need to be able access the output files, you should set this 
    // field to a persistent location, e.g. a persistent volume, or configure
    // artifact options.
    optional string workdir = 4;

    // Path to the playwright installation. We execute tests from this location.
    // If not specified, we'll use the value of environment variable
    // $PLAYWRIGHT_DIR, which is automatically set by the official cloudprober
    // playwright image (tag: "<version>-pw").
    optional string playwright_dir = 5;

    // NPX path. Default is to assume npx is in the PATH.
    optional string npx_path = 6 [default = "npx"];

    // Whether to enable screenshots for successful tests as well.
    // Note that screenshots are always enabled for failed tests, and you can
    // always save screenshots explicitly in the test spec.
    optional bool save_screenshots_for_success = 7 [default = false];

    // Traces are expensive and can slow down the test. We recommend to enable
    // this only when needed.
    optional bool save_traces = 8 [default = false];

    // By default, we export all test metrica as counters. You can change how
    // metrics are exported by setting the following options.
    optional TestMetricsOptions test_metrics_options = 9;

    // Artifacts options. If probe level artifacts options are not specified,
    // we use global artifacts options if available. Note: it typically makes
    // more sense to specify artifacts options at the global level.
    optional artifacts.ArtifactsOptions artifacts_options = 10;

    // Cleanup options.
    optional artifacts.CleanupOptions workdir_cleanup_options = 11;

    // Environment variables. These are passed/set before probing starts.
    map<string, string> env_var = 12;
    
    // Requests per probe.
    // Number of DNS requests per probe. Requests are executed concurrently and
    // each DNS request contributes to probe results. For example, if you run two
    // requests per probe, "total" counter will be incremented by 2.
    optional int32 requests_per_probe = 98 [default = 1];

    // How long to wait between two requests to the same target. Only relevant
    // if requests_per_probe is also configured.
    //
    // This value should be less than (interval - timeout) / requests_per_probe.
    // This is to ensure that all requests are executed within one probe interval
    // and all of them get sufficient time. For example, if probe interval is 2s,
    // timeout is 1s, and requests_per_probe is 10,  requests_interval_msec
    // should be less than 10ms.
    optional int32 requests_interval_msec = 99 [default = 0];
}