syntax = "proto2";

package cloudprober.probes.external;

import "github.com/cloudprober/cloudprober/metrics/payload/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/external/proto";

message ProbeConf {
  // External probes support two mode: ONCE and SERVER. In ONCE mode, external
  // command is re-executed for each probe run, while in SERVER mode, command
  // is run in server mode, re-executed only if not running already.
  enum Mode {
    ONCE = 0;
    SERVER = 1;
  }
  optional Mode mode = 1 [default = ONCE];

  // Command.  For ONCE probes, arguments are processed for the following field
  // substitutions:
  // @probe@                    Name of the probe
  // @target.name@ or @target@  Hostname of the target
  // @target.port@ or @port@    Port of the target
  // @target.ip@                IP address associated with target
  // @address@                  Resolved IP address of the target, in case of
  //                            discovered targets, same as @target.ip@.
  // @target.label.<x>@         Label x of the target
  //
  // For example, for target ig-us-central1-a, /tools/recreate_vm -vm @target@
  // will get converted to: /tools/recreate_vm -vm ig-us-central1-a
  required string command = 2;

  // Command environment variables. These are passed on to the external probe
  // process as environment variables.
  map<string,string> env_var = 6;

  // Options for the SERVER mode probe requests. These options are passed on to
  // the external probe server as part of the ProbeRequest. Values are
  // substituted similar to command arguments for the ONCE mode probes above.
  message Option {
    optional string name = 1;
    optional string value = 2;
  }
  repeated Option options = 3;

  // Export output as metrics, where output is the output returned by the
  // external probe process, over stdout for ONCE probes, and through ProbeReply
  // for SERVER probes. Cloudprober expects variables to be in the following
  // format in the output:
  // var1 value1 (for example: total_errors 589)
  optional bool output_as_metrics = 4 [default = true];
  optional metrics.payload.OutputMetricsOptions output_metrics_options = 5;

  // (Only applicable to ONCE mode). Disable streaming output metrics. By
  // default, external probe will export output metrics as they are available
  // on the stdout. If this option is set to true, output metrics will be
  // exported only after the probe has completed.
  // New in version 0.13.4. This was true by default in previous versions. 
  optional bool disable_streaming_output_metrics = 7 [default = false];
}

// Server mode request and response messages.
// Do not delete the marker below. We use it to split server specific
// messages from the rest of the file.
// To split server specific messages from the rest of the file:
//  echo -e "syntax = \"proto2\";\n\npackage cloudprober.probes.external;" > server.proto
//  sed -n "/^\/\/ SERVER_MESSAGES_START/,\$p" config.proto >> server.proto
// SERVER_MESSAGES_START

// ProbeRequest is the message that cloudprober sends to the external probe
// server.
message ProbeRequest {
  // The unique identifier for this request.  This is unique across
  // an execution of the probe server.  It starts at 1.
  required int32 request_id = 1;

  // How long to allow for the execution of this request, in
  // milliseconds.  If the time limit is exceeded, the server
  // should abort the request, but *not* send back a reply.  The
  // client will have to do timeouts anyway.
  required int32 time_limit = 2;

  message Option {
    required string name = 1;
    required string value = 2;
  }
  repeated Option options = 3;
}

// ProbeReply is the message that external probe server sends back to the
// cloudprober.
message ProbeReply {
  // The sequence number for this request.
  required int32 request_id = 1;

  // For a normal result, this is not present.
  // If it is present, it indicates that the probe failed.
  optional string error_message = 2;

  // The result of the probe. Cloudprober parses the payload to retrieve
  // variables from it. It expects variables in the following format:
  // var1 value1 (for example: total_errors 589)
  // TODO(manugarg): Add an option to export mapped variables, for example:
  // client-errors map:lang java:200 python:20 golang:3
  optional string payload = 3;
}

