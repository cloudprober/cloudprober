syntax = "proto2";

package cloudprober.probes.http;

import "github.com/cloudprober/cloudprober/common/oauth/proto/config.proto";
import "github.com/cloudprober/cloudprober/common/tlsconfig/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/http/proto";

// Next tag: 20
message ProbeConf {
  enum ProtocolType {
    HTTP = 0;
    HTTPS = 1;
  }

  enum Method {
    GET = 0;
    POST = 1;
    PUT = 2;
    HEAD = 3;
    DELETE = 4;
    PATCH = 5;
    OPTIONS = 6;
  }

  message Header {
    optional string name = 1;
    optional string value = 2;
  }

  // Which HTTP protocol to use
  optional ProtocolType protocol = 1 [default = HTTP];
  // Relative URL (to append to all targets). Must begin with '/'
  optional string relative_url = 2;
  // Port for HTTP requests. If not specfied, port is selected in the following
  // order:
  //  - If port is provided by the targets (e.g. kubernetes endpoint or
  //    service), that port is used.
  //  - 80 for HTTP and 443 for HTTPS.
  optional int32 port = 3;

  // Whether to resolve the target before making the request. If set to false,
  // we hand over the target and relative_url directly to the golang's HTTP
  // module, Otherwise, we resolve the target first to an IP address and
  // make a request using that while passing target name as Host header.
  // By default we resolve first if it's a discovered resource, e.g., a k8s
  // endpoint.
  optional bool resolve_first = 4;

  // Export response (body) count as a metric
  optional bool export_response_as_metrics = 5 [default = false];

  // HTTP request method
  optional Method method = 7 [default = GET];

  // HTTP request headers
  repeated Header headers = 8;

  // Request body.
  optional string body = 9;

  // Enable HTTP keep-alive. If set to true, underlying connection is reused
  // for further probes. Default is to close the connection after every request.
  optional bool keep_alive = 10;

  // OAuth Config
  optional oauth.Config oauth_config = 11;

  // Disable HTTP2
  // Golang HTTP client automatically enables HTTP/2 if server supports it. This
  // option disables that behavior to enforce HTTP/1.1 for testing purpose.
  optional bool disable_http2 = 13;

  // Disable TLS certificate validation. If set to true, any certificate
  // presented by the server for any host name will be accepted
  // Deprecation: This option is now subsumed by the tls_config below. To
  // disable cert validation use:
  // tls_config {
  //   disable_cert_validation: true
  // }
  optional bool disable_cert_validation = 14;

  // TLS config
  optional tlsconfig.TLSConfig tls_config = 15;

  // Proxy URL, e.g. http://myproxy:3128
  optional string proxy_url = 16;

  // User agent. Default user agent is Go's default user agent.
  optional string user_agent = 19;

  // Maximum idle connections to keep alive
  optional int32 max_idle_conns = 17 [default = 256];

  // The maximum amount of redirects the HTTP client will follow.
  // To disable redirects, use max_redirects: 0.
  optional int32 max_redirects = 18;

  // Interval between targets.
  optional int32 interval_between_targets_msec = 97 [default = 10];

  // Requests per probe.
  // Number of HTTP requests per probe. Requests are executed concurrently and
  // each HTTP re contributes to probe results. For example, if you run two
  // requests per probe, "total" counter will be incremented by 2.
  optional int32 requests_per_probe = 98 [default = 1];

  // How long to wait between two requests to the same target. Only relevant
  // if requests_per_probe is also configured.
  //
  // This value should be less than (interval - timeout) / requests_per_probe.
  // This is to ensure that all requests are executed within one probe interval
  // and all of them get sufficient time. For example, if probe interval is 2s,
  // timeout is 1s, and requests_per_probe is 10,  requests_interval_msec
  // should be less than 10ms.
  optional int32 requests_interval_msec = 99 [default = 0];
}
