syntax = "proto2";

package cloudprober.probes.http;

import "github.com/cloudprober/cloudprober/internal/oauth/proto/config.proto";
import "github.com/cloudprober/cloudprober/internal/tlsconfig/proto/config.proto";

option go_package = "github.com/cloudprober/cloudprober/probes/http/proto";

// Next tag: 21
message ProbeConf {
  enum Scheme {
    HTTP = 0;
    HTTPS = 1;
  }

  enum Method {
    GET = 0;
    POST = 1;
    PUT = 2;
    HEAD = 3;
    DELETE = 4;
    PATCH = 5;
    OPTIONS = 6;
  }

  message Header {
    optional string name = 1;
    optional string value = 2;
  }

  // HTTP request scheme (Corresponding target label: "scheme"). If not set, we
  // use taget's 'scheme' label if present.
  // Note: protocol is deprecated, use scheme instead.
  oneof scheme_type {
    Scheme protocol = 1 [default = HTTP];
    Scheme scheme = 21 [default = HTTP];
  };

  // Relative URL (Corresponding target label: "path"). We construct the final
  // URL like this:
  // <scheme>://<host>:<port>/<relative_url>.
  //
  // Note that the relative_url should start with a '/'.
  optional string relative_url = 2;

  // Port for HTTP requests (Corresponding target field: port)
  // Default is to use the scheme specific port, but if this field is not
  // set and discovered target has a port (e.g., k8s services, ingresses),
  // we use target's port.
  optional int32 port = 3;

  // Whether to resolve the target before making the request. If set to true,
  // we resolve the target first to an IP address and make a request using
  // that while passing target name (or 'host' label if present) as Host
  // header.
  //
  // This behavior is automatic for discovered targets if they have an IP
  // address associated with them. Usually you don't need to worry about this
  // field and you can left it unspecified. We'll ty to do the right thing.
  optional bool resolve_first = 4;

  // Export response (body) count as a metric
  optional bool export_response_as_metrics = 5 [default = false];

  // HTTP request method
  optional Method method = 7 [default = GET];

  // HTTP request headers
  // It is recommended to use "header" instead of "headers" for new configs.
  // header {
  //   key: "Authorization"
  //   value: "Bearer {{env "AUTH_TOKEN"}}"
  // }   
  repeated Header headers = 8;
  map<string, string> header = 20;

  // Request body. This field works similar to the curl's data flag. If there
  // are multiple "body" fields, we combine their values with a '&' in between.
  //
  // Also, we try to guess the content-type header based on the data:
  // 1) If data appears to be a valid json, we automatically set the
  //    content-type header to "application/json".
  // 2) If the final data string appears to be a valid query string, we
  //    set content-type to "application/x-www-form-urlencoded". Content type
  //    header can still be overridden using the header field above.
  // Example:
  //  body: "grant_type=client_credentials"
  //  body: "scope=transferMoney"
  //  body: "clientId=aweseomeClient"
  //  body: "clientSecret=noSecret"
  repeated string body = 9;

  // Enable HTTP keep-alive. If set to true, underlying connection is reused
  // for further probes. Default is to close the connection after every request.
  optional bool keep_alive = 10;

  // OAuth Config
  optional oauth.Config oauth_config = 11;

  // Disable HTTP2
  // Golang HTTP client automatically enables HTTP/2 if server supports it. This
  // option disables that behavior to enforce HTTP/1.1 for testing purpose.
  optional bool disable_http2 = 13;

  // Disable TLS certificate validation. If set to true, any certificate
  // presented by the server for any host name will be accepted
  // Deprecation: This option is now subsumed by the tls_config below. To
  // disable cert validation use:
  // tls_config {
  //   disable_cert_validation: true
  // }
  optional bool disable_cert_validation = 14;

  // TLS config
  optional tlsconfig.TLSConfig tls_config = 15;

  // Proxy URL, e.g. http://myproxy:3128
  optional string proxy_url = 16;

  // User agent. Default user agent is Go's default user agent.
  optional string user_agent = 19;

  // Maximum idle connections to keep alive
  optional int32 max_idle_conns = 17 [default = 256];

  // The maximum amount of redirects the HTTP client will follow.
  // To disable redirects, use max_redirects: 0.
  optional int32 max_redirects = 18;

  enum LatencyBreakdown {
    NO_BREAKDOWN = 0;
    ALL_STAGES = 1;
    DNS_LATENCY = 2;           // Exported as dns_latency
    CONNECT_LATENCY = 3;       // Exported as connect_latency
    TLS_HANDSHAKE_LATENCY = 4; // Exported as tls_handshake_latency
    REQ_WRITE_LATENCY = 5;     // Exported as req_write_latency
    FIRST_BYTE_LATENCY = 6;    // Exported as first_byte_latency
  }
  // Add latency breakdown to probe results. This will add latency breakdown
  // by various stages of the request processing, e.g., DNS resolution, TCP
  // connection, TLS handshake, etc. You can select stages individually or
  // specify "ALL_STAGES" to get breakdown for all stages.
  //
  // Example:
  //   latency_breakdown: [ ALL_STAGES ]
  //   latency_breakdown: [ DNS_LATENCY, CONNECT_LATENCY, TLS_HANDSHAKE_LATENCY ]
  repeated LatencyBreakdown latency_breakdown = 22;

  // Interval between targets.
  optional int32 interval_between_targets_msec = 97 [default = 10];

  // Requests per probe.
  // Number of HTTP requests per probe. Requests are executed concurrently and
  // each HTTP re contributes to probe results. For example, if you run two
  // requests per probe, "total" counter will be incremented by 2.
  optional int32 requests_per_probe = 98 [default = 1];

  // How long to wait between two requests to the same target. Only relevant
  // if requests_per_probe is also configured.
  //
  // This value should be less than (interval - timeout) / requests_per_probe.
  // This is to ensure that all requests are executed within one probe interval
  // and all of them get sufficient time. For example, if probe interval is 2s,
  // timeout is 1s, and requests_per_probe is 10,  requests_interval_msec
  // should be less than 10ms.
  optional int32 requests_interval_msec = 99 [default = 0];

}
