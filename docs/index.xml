<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on</title><link>https://cloudprober.org/docs/</link><description>Recent content in Docs on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 01 Nov 2022 17:24:32 -0700</lastBuildDate><atom:link href="https://cloudprober.org/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Cloudwatch (AWS)</title><link>https://cloudprober.org/docs/surfacers/cloudwatch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/surfacers/cloudwatch/</guid><description>Cloudprober can natively export metrics to AWS Cloudwatch using the cloudwatch surfacer. Adding the cloudwatch surfacer to cloudprover is as simple as adding the following stanza to the config:
surfacer { type: CLOUDWATCH } Authentication #
The cloudwatch surfacer uses the AWS Go SDK, and supports the default credential chain:
Environment variables. Shared credentials file. If your application uses an ECS task definition or RunTask API operation, IAM role for tasks.</description></item><item><title>Configuration</title><link>https://cloudprober.org/docs/config/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/overview/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB # Probes to run.probe &amp;lt;cloudprober.probes.ProbeDef>: - name: &amp;lt;string> type: (PING|HTTP|DNS|EXTERNAL|UDP|UDP_LISTENER|GRPC|TCP|EXTENSION|USER_DEFINED): &amp;lt;enum> # Which machines this probe should run on. If defined, cloudprober will run # this probe only if machine&amp;#39;s hostname matches this value. runOn: &amp;lt;string> # Interval between two probe runs in milliseconds. # Only one of &amp;#34;interval&amp;#34; and &amp;#34;inteval_msec&amp;#34; should be defined.</description></item><item><title>Metrics Config</title><link>https://cloudprober.org/docs/config/metrics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/metrics/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.metrics.Dist [explicitBuckets &amp;lt;string&amp;gt; | exponentialBuckets &amp;lt;cloudprober.metrics.ExponentialBuckets&amp;gt;]: &amp;lt;oneof> cloudprober.metrics.ExponentialBuckets scaleFactor: &amp;lt;float> base: &amp;lt;float> numBuckets: &amp;lt;uint32> cloudprober.metrics.payload.OutputMetricsOptions metricsKind: (UNDEFINED|GAUGE|CUMULATIVE): &amp;lt;enum> # Additional labels (comma-separated) to attach to the output metrics, e.g. # &amp;#34;region=us-east1,zone=us-east1-d&amp;#34;. ptype=&amp;#34;external&amp;#34; and probe=&amp;#34;&amp;lt;probeName&amp;gt;&amp;#34; # are attached automatically.additionalLabels: &amp;lt;string> # Whether to aggregate metrics in Cloudprober. If enabled, Cloudprober # aggregates the metrics returned by the external probe process -- external # probe process should return metrics only since the last probe run.</description></item><item><title>OAuth Config</title><link>https://cloudprober.org/docs/config/oauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/oauth/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.oauth.BearerToken [file &amp;lt;string&amp;gt; | cmd &amp;lt;string&amp;gt; | &amp;nbsp;gceServiceAccount &amp;lt;string&amp;gt; | k8sLocalToken &amp;lt;bool&amp;gt;]: &amp;lt;oneof> # If above sources return JSON tokens with an expiry, we use that info to # determine when to refresh tokens and refresh_interval_sec is completely # ignored. If above sources return a string, we refresh from the source # every 30s by default.</description></item><item><title>Probes Config</title><link>https://cloudprober.org/docs/config/probes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/probes/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.probes.AdditionalLabel key: &amp;lt;string> # Value can either be a static value or can be derived from target&amp;#39;s labels. # To get value from target&amp;#39;s labels, use target.labels.&amp;lt;target&amp;#39;s label key&amp;gt; # as value.value: &amp;lt;string> cloudprober.probes.DebugOptions # Whether to log metrics or not.logMetrics: &amp;lt;bool> cloudprober.probes.ProbeDef name: &amp;lt;string> type: (PING|HTTP|DNS|EXTERNAL|UDP|UDP_LISTENER|GRPC|TCP|EXTENSION|USER_DEFINED): &amp;lt;enum> # Which machines this probe should run on.</description></item><item><title>RDS Config</title><link>https://cloudprober.org/docs/config/rds/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/rds/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.rds.ClientConf.ServerOptions serverAddress: &amp;lt;string> # Optional oauth config for authentication.oauthConfig: &amp;lt;cloudprober.oauth.Config> # TLS config, it can be used to: # - Specify a CA cert for server cert verification: # tls_config { # ca_cert_file: &amp;#34;....&amp;#34; # } # # - Specify client&amp;#39;s TLS cert and key: # tls_config { # tls_cert_file: &amp;#34;.</description></item><item><title>Servers Config</title><link>https://cloudprober.org/docs/config/servers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/servers/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.servers.ServerDef type: (HTTP|UDP|GRPC|EXTERNAL): &amp;lt;enum> [httpServer &amp;lt;cloudprober.servers.http.ServerConf&amp;gt; | udpServer &amp;lt;cloudprober.servers.udp.ServerConf&amp;gt; | &amp;nbsp;grpcServer &amp;lt;cloudprober.servers.grpc.ServerConf&amp;gt; | externalServer &amp;lt;cloudprober.servers.external.ServerConf&amp;gt;]: &amp;lt;oneof> cloudprober.servers.external.ServerConf command: &amp;lt;string> cloudprober.servers.grpc.ServerConf port: &amp;lt;int32> | default: 3142 # Enables gRPC reflection for publicly visible services, allowing grpc_cli to # work. See https://grpc.io/grpc/core/md_doc_server_reflection_tutorial.html.enableReflection: &amp;lt;bool> | default: false # If use_dedicated_server is set to true, then create a new gRPC server # to handle probes.</description></item><item><title>Stackdriver (Google Cloud)</title><link>https://cloudprober.org/docs/surfacers/stackdriver/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/surfacers/stackdriver/</guid><description>Cloudprober can natively export metrics to Google Cloud Monitoring (formerly, Stackdriver) using stackdriver surfacer. Adding stackdriver surfacer to cloudprober is as simple as adding the following stanza to the config:
surfacer { type: STACKDRIVER } This config will work if you&amp;rsquo;re running on GCP and your VM (or GKE pod) has access to Cloud Monitoring (Stackdriver). If running on any other platform, you&amp;rsquo;ll have to specify the GCP project where you want to send the metrics, and you&amp;rsquo;ll have to configure your environment for Google Application Default Credentials.</description></item><item><title>Surfacers</title><link>https://cloudprober.org/docs/surfacers/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/surfacers/overview/</guid><description>One of the biggest strengths of cloudprober is that it can export data to multiple monitoring systems, even simultaneously, just based on simple configuration. Cloudprober does that using a built-in mechanism, called surfacers. Each surfacer type implements interface for a specific monitoring system, for example, pubsub surfacer publishes data to Google Pub/Sub. You can configure multiple surfacers at the same time. If you don&amp;rsquo;t specify any surfacer, prometheus and file surfacers are enabled automatically.</description></item><item><title>Surfacers Config</title><link>https://cloudprober.org/docs/config/surfacer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://cloudprober.org/docs/config/surfacer/</guid><description>Config: main | probes | surfacers | targets | validators | oauth | rds | tlsconfig | metrics YAML|TextPB cloudprober.surfacer.LabelFilter key: &amp;lt;string> value: &amp;lt;string> cloudprober.surfacer.SurfacerDef # This name is used for logging. If not defined, it&amp;#39;s derived from the type. # Note that this field is required for the USER_DEFINED surfacer type and # should match with the name that you used while registering the user defined # surfacer.name: &amp;lt;string> type: (NONE|PROMETHEUS|STACKDRIVER|FILE|POSTGRES|PUBSUB|CLOUDWATCH|DATADOG|PROBESTATUS|BIGQUERY|USER_DEFINED): &amp;lt;enum> # How many metrics entries (EventMetrics) to buffer.</description></item></channel></rss>