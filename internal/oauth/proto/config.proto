syntax = "proto3";

package cloudprober.oauth;

option go_package = "github.com/cloudprober/cloudprober/internal/oauth/proto";

message Config {
  oneof type {
    HTTPRequest http_request = 3;
    BearerToken bearer_token = 1;
    GoogleCredentials google_credentials = 2;
  }

  // How long before the expiry do we refresh. Default is 60 (1m). This applies
  // only to http_request and bearer_token types, and only if token presents
  // expiry in some way.
  // TODO(manugarg): Consider setting default based on probe interval.
  optional int32 refresh_expiry_buffer_sec = 20;
}

message HTTPRequest {
  string token_url = 1;
  
  string method = 2;

  // Data to be sent as request body. If there are multiple "data" fields, we combine
  // their values with a '&' in between. Note: 1) If data appears to be a valid json,
  // we automatically set the content-type header to "application/json", 2) If data
  // appears to be a query string we set content-type to
  // "application/x-www-form-urlencoded". Content type header can still be overridden
  // using the header field below.
  repeated string data = 3;

  // HTTP request headers
  map<string,string> header = 8;
}

// Bearer token is added to the HTTP request through an HTTP header:
// "Authorization: Bearer <access_token>"
message BearerToken {
  oneof source {
    // Path to token file.
    string file = 1;

    // Run a comand to obtain the token, e.g.
    // cat /var/lib/myapp/token, or
    // /var/lib/run/get_token.sh
    string cmd = 2;

    // GCE metadata token
    string gce_service_account = 3;

    // K8s service account token file:
    // /var/run/secrets/kubernetes.io/serviceaccount/token
    bool k8s_local_token = 4;
  }

  // If above sources return JSON tokens with an expiry, we use that info to
  // determine when to refresh tokens and refresh_interval_sec is completely
  // ignored. If above sources return a string, we refresh from the source
  // every 30s by default. To disable this behavior set refresh_interval_sec to
  // zero.
  optional float refresh_interval_sec = 90;
}

// Google credentials in JSON format. We simply use oauth2/google package to
// use these credentials.
message GoogleCredentials {
  string json_file = 1;
  repeated string scope = 2;

  // Use encoded JWT directly as access token, instead of implementing the whole
  // OAuth2.0 flow.
  bool jwt_as_access_token = 4;

  // Audience works only if jwt_as_access_token is true.
  string audience = 3;
}
