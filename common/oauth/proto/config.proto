syntax = "proto3";

package cloudprober.oauth;

option go_package = "github.com/cloudprober/cloudprober/common/oauth/proto";


message Config {
  oneof type {
    BearerToken bearer_token = 1;
    GoogleCredentials google_credentials = 2;
    JWT jwt = 3;
  }
}

message JWT {
  string token_url = 1;
  
  string method = 2;

  // data can be repeated. If it is repeated we combine the values with a '&'
  // in between. If data appears to be a valid json, we automatically add the
  // content-type header: "Content-Type: application/json" (can be overridden).
  repeated string data = 3;

  message Header {
    optional string name = 1;
    optional string value = 2;
  }
  // HTTP request headers
  repeated Header header = 8;
}

// Bearer token is added to the HTTP request through an HTTP header:
// "Authorization: Bearer <access_token>"
message BearerToken {
  oneof source {
    // Path to token file.
    string file = 1;

    // Run a comand to obtain the token, e.g.
    // cat /var/lib/myapp/token, or
    // /var/lib/run/get_token.sh
    string cmd = 2;

    // GCE metadata token
    string gce_service_account = 3;
  }

  // How often to refresh token. As OAuth token usually expire, we need to
  // refresh them on a regular interval. If set to 0, caching is disabled.
  // Default is 60s.
  optional float refresh_interval_sec = 90;
}

// Google credentials in JSON format. We simply use oauth2/google package to
// use these credentials.
message GoogleCredentials {
  string json_file = 1;
  repeated string scope = 2;

  // Use encoded JWT directly as access token, instead of implementing the whole
  // OAuth2.0 flow.
  bool jwt_as_access_token = 4;

  // Audience works only if jwt_as_access_token is true.
  string audience = 3;
}
