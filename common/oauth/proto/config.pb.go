// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v5.27.5
// source: github.com/cloudprober/cloudprober/common/oauth/proto/config.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*Config_File
	//	*Config_HttpRequest
	//	*Config_Cmd
	//	*Config_GceServiceAccount
	//	*Config_K8SLocalToken
	//	*Config_GoogleCredentials
	//	*Config_BearerToken
	Source isConfig_Source `protobuf_oneof:"source"`
	// If auto-refreshing based on token's expiry, how long before the expiry do we
	// refresh.
	//
	// TODO(manugarg): Consider setting default based on probe interval.
	RefreshExpiryBufferSec *int32 `protobuf:"varint,20,opt,name=refresh_expiry_buffer_sec,json=refreshExpiryBufferSec,def=60" json:"refresh_expiry_buffer_sec,omitempty"`
	// If set explicitly, we'll refresh token at this interval regardless of
	// token's expiry value.
	//
	// If not set explicitly, we don't refresh at regular interval if token's
	// expiry is set, otherwise we refresh at the default interval (30s).
	//
	// To disable refresh on interval even if expiry is not set, set this to 0.
	//
	// In most cases, Cloudprober does the right thing based on the retrieved
	// token and you don't need to set this field.
	RefreshIntervalSec *float32 `protobuf:"fixed32,21,opt,name=refresh_interval_sec,json=refreshIntervalSec,def=30" json:"refresh_interval_sec,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

// Default values for Config fields.
const (
	Default_Config_RefreshExpiryBufferSec = int32(60)
	Default_Config_RefreshIntervalSec     = float32(30)
)

func (x *Config) Reset() {
	*x = Config{}
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetSource() isConfig_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Config) GetFile() string {
	if x != nil {
		if x, ok := x.Source.(*Config_File); ok {
			return x.File
		}
	}
	return ""
}

func (x *Config) GetHttpRequest() *HTTPRequest {
	if x != nil {
		if x, ok := x.Source.(*Config_HttpRequest); ok {
			return x.HttpRequest
		}
	}
	return nil
}

func (x *Config) GetCmd() string {
	if x != nil {
		if x, ok := x.Source.(*Config_Cmd); ok {
			return x.Cmd
		}
	}
	return ""
}

func (x *Config) GetGceServiceAccount() string {
	if x != nil {
		if x, ok := x.Source.(*Config_GceServiceAccount); ok {
			return x.GceServiceAccount
		}
	}
	return ""
}

func (x *Config) GetK8SLocalToken() bool {
	if x != nil {
		if x, ok := x.Source.(*Config_K8SLocalToken); ok {
			return x.K8SLocalToken
		}
	}
	return false
}

func (x *Config) GetGoogleCredentials() *GoogleCredentials {
	if x != nil {
		if x, ok := x.Source.(*Config_GoogleCredentials); ok {
			return x.GoogleCredentials
		}
	}
	return nil
}

func (x *Config) GetBearerToken() *BearerToken {
	if x != nil {
		if x, ok := x.Source.(*Config_BearerToken); ok {
			return x.BearerToken
		}
	}
	return nil
}

func (x *Config) GetRefreshExpiryBufferSec() int32 {
	if x != nil && x.RefreshExpiryBufferSec != nil {
		return *x.RefreshExpiryBufferSec
	}
	return Default_Config_RefreshExpiryBufferSec
}

func (x *Config) GetRefreshIntervalSec() float32 {
	if x != nil && x.RefreshIntervalSec != nil {
		return *x.RefreshIntervalSec
	}
	return Default_Config_RefreshIntervalSec
}

type isConfig_Source interface {
	isConfig_Source()
}

type Config_File struct {
	// Path to token file.
	File string `protobuf:"bytes,1,opt,name=file,oneof"`
}

type Config_HttpRequest struct {
	// Get token by making an HTTP request.
	HttpRequest *HTTPRequest `protobuf:"bytes,2,opt,name=http_request,json=httpRequest,oneof"`
}

type Config_Cmd struct {
	// Run a comand to obtain the token, e.g.
	// cat /var/lib/myapp/token, or
	// /var/lib/run/get_token.sh
	Cmd string `protobuf:"bytes,3,opt,name=cmd,oneof"`
}

type Config_GceServiceAccount struct {
	// GCE metadata token
	GceServiceAccount string `protobuf:"bytes,4,opt,name=gce_service_account,json=gceServiceAccount,oneof"`
}

type Config_K8SLocalToken struct {
	// K8s service account token file:
	// /var/run/secrets/kubernetes.io/serviceaccount/token
	K8SLocalToken bool `protobuf:"varint,5,opt,name=k8s_local_token,json=k8sLocalToken,oneof"`
}

type Config_GoogleCredentials struct {
	// Google credentials, either from a default source or a JSON file.
	GoogleCredentials *GoogleCredentials `protobuf:"bytes,8,opt,name=google_credentials,json=googleCredentials,oneof"`
}

type Config_BearerToken struct {
	// Bearer token (deprecated)
	// This field is deprecated. Use one of the other source directly. This
	// layer turned out to be unnecessary.
	BearerToken *BearerToken `protobuf:"bytes,7,opt,name=bearer_token,json=bearerToken,oneof"`
}

func (*Config_File) isConfig_Source() {}

func (*Config_HttpRequest) isConfig_Source() {}

func (*Config_Cmd) isConfig_Source() {}

func (*Config_GceServiceAccount) isConfig_Source() {}

func (*Config_K8SLocalToken) isConfig_Source() {}

func (*Config_GoogleCredentials) isConfig_Source() {}

func (*Config_BearerToken) isConfig_Source() {}

type HTTPRequest struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TokenUrl *string                `protobuf:"bytes,1,req,name=token_url,json=tokenUrl" json:"token_url,omitempty"`
	Method   *string                `protobuf:"bytes,2,opt,name=method" json:"method,omitempty"`
	// Data to be sent as request body. If there are multiple "data" fields, we combine
	// their values with a '&' in between. Note: 1) If data appears to be a valid json,
	// we automatically set the content-type header to "application/json", 2) If data
	// appears to be a query string we set content-type to
	// "application/x-www-form-urlencoded". Content type header can still be overridden
	// using the header field below.
	Data []string `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	// HTTP request headers
	Header        map[string]string `protobuf:"bytes,8,rep,name=header" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HTTPRequest) Reset() {
	*x = HTTPRequest{}
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HTTPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPRequest) ProtoMessage() {}

func (x *HTTPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPRequest.ProtoReflect.Descriptor instead.
func (*HTTPRequest) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescGZIP(), []int{1}
}

func (x *HTTPRequest) GetTokenUrl() string {
	if x != nil && x.TokenUrl != nil {
		return *x.TokenUrl
	}
	return ""
}

func (x *HTTPRequest) GetMethod() string {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return ""
}

func (x *HTTPRequest) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HTTPRequest) GetHeader() map[string]string {
	if x != nil {
		return x.Header
	}
	return nil
}

// Bearer token is added to the HTTP request through an HTTP header:
// "Authorization: Bearer <access_token>"
//
// This message is deprecated. Use these sources directly in Config instead.
type BearerToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*BearerToken_File
	//	*BearerToken_Cmd
	//	*BearerToken_GceServiceAccount
	//	*BearerToken_K8SLocalToken
	Source isBearerToken_Source `protobuf_oneof:"source"`
	// If above sources return JSON tokens with an expiry, we use that info to
	// determine when to refresh tokens and refresh_interval_sec is completely
	// ignored. If above sources return a string, we refresh from the source
	// every 30s by default. To disable this behavior set refresh_interval_sec to
	// zero.
	RefreshIntervalSec *float32 `protobuf:"fixed32,90,opt,name=refresh_interval_sec,json=refreshIntervalSec" json:"refresh_interval_sec,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *BearerToken) Reset() {
	*x = BearerToken{}
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BearerToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BearerToken) ProtoMessage() {}

func (x *BearerToken) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BearerToken.ProtoReflect.Descriptor instead.
func (*BearerToken) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescGZIP(), []int{2}
}

func (x *BearerToken) GetSource() isBearerToken_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *BearerToken) GetFile() string {
	if x != nil {
		if x, ok := x.Source.(*BearerToken_File); ok {
			return x.File
		}
	}
	return ""
}

func (x *BearerToken) GetCmd() string {
	if x != nil {
		if x, ok := x.Source.(*BearerToken_Cmd); ok {
			return x.Cmd
		}
	}
	return ""
}

func (x *BearerToken) GetGceServiceAccount() string {
	if x != nil {
		if x, ok := x.Source.(*BearerToken_GceServiceAccount); ok {
			return x.GceServiceAccount
		}
	}
	return ""
}

func (x *BearerToken) GetK8SLocalToken() bool {
	if x != nil {
		if x, ok := x.Source.(*BearerToken_K8SLocalToken); ok {
			return x.K8SLocalToken
		}
	}
	return false
}

func (x *BearerToken) GetRefreshIntervalSec() float32 {
	if x != nil && x.RefreshIntervalSec != nil {
		return *x.RefreshIntervalSec
	}
	return 0
}

type isBearerToken_Source interface {
	isBearerToken_Source()
}

type BearerToken_File struct {
	// Path to token file.
	File string `protobuf:"bytes,1,opt,name=file,oneof"`
}

type BearerToken_Cmd struct {
	// Run a comand to obtain the token, e.g.
	// cat /var/lib/myapp/token, or
	// /var/lib/run/get_token.sh
	Cmd string `protobuf:"bytes,2,opt,name=cmd,oneof"`
}

type BearerToken_GceServiceAccount struct {
	// GCE metadata token
	GceServiceAccount string `protobuf:"bytes,3,opt,name=gce_service_account,json=gceServiceAccount,oneof"`
}

type BearerToken_K8SLocalToken struct {
	// K8s service account token file:
	// /var/run/secrets/kubernetes.io/serviceaccount/token
	K8SLocalToken bool `protobuf:"varint,4,opt,name=k8s_local_token,json=k8sLocalToken,oneof"`
}

func (*BearerToken_File) isBearerToken_Source() {}

func (*BearerToken_Cmd) isBearerToken_Source() {}

func (*BearerToken_GceServiceAccount) isBearerToken_Source() {}

func (*BearerToken_K8SLocalToken) isBearerToken_Source() {}

// Google credentials in JSON format. We simply use oauth2/google package to
// use these credentials.
type GoogleCredentials struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	JsonFile *string                `protobuf:"bytes,1,opt,name=json_file,json=jsonFile" json:"json_file,omitempty"`
	Scope    []string               `protobuf:"bytes,2,rep,name=scope" json:"scope,omitempty"`
	// Use encoded JWT directly as access token, instead of implementing the whole
	// OAuth2.0 flow.
	JwtAsAccessToken *bool `protobuf:"varint,4,opt,name=jwt_as_access_token,json=jwtAsAccessToken" json:"jwt_as_access_token,omitempty"`
	// Audience works only if jwt_as_access_token is true.
	Audience      *string `protobuf:"bytes,3,opt,name=audience" json:"audience,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GoogleCredentials) Reset() {
	*x = GoogleCredentials{}
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleCredentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleCredentials) ProtoMessage() {}

func (x *GoogleCredentials) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleCredentials.ProtoReflect.Descriptor instead.
func (*GoogleCredentials) Descriptor() ([]byte, []int) {
	return file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescGZIP(), []int{3}
}

func (x *GoogleCredentials) GetJsonFile() string {
	if x != nil && x.JsonFile != nil {
		return *x.JsonFile
	}
	return ""
}

func (x *GoogleCredentials) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GoogleCredentials) GetJwtAsAccessToken() bool {
	if x != nil && x.JwtAsAccessToken != nil {
		return *x.JwtAsAccessToken
	}
	return false
}

func (x *GoogleCredentials) GetAudience() string {
	if x != nil && x.Audience != nil {
		return *x.Audience
	}
	return ""
}

var File_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto protoreflect.FileDescriptor

const file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDesc = "" +
	"\n" +
	"Bgithub.com/cloudprober/cloudprober/common/oauth/proto/config.proto\x12\x11cloudprober.oauth\"\xee\x03\n" +
	"\x06Config\x12\x14\n" +
	"\x04file\x18\x01 \x01(\tH\x00R\x04file\x12C\n" +
	"\fhttp_request\x18\x02 \x01(\v2\x1e.cloudprober.oauth.HTTPRequestH\x00R\vhttpRequest\x12\x12\n" +
	"\x03cmd\x18\x03 \x01(\tH\x00R\x03cmd\x120\n" +
	"\x13gce_service_account\x18\x04 \x01(\tH\x00R\x11gceServiceAccount\x12(\n" +
	"\x0fk8s_local_token\x18\x05 \x01(\bH\x00R\rk8sLocalToken\x12U\n" +
	"\x12google_credentials\x18\b \x01(\v2$.cloudprober.oauth.GoogleCredentialsH\x00R\x11googleCredentials\x12C\n" +
	"\fbearer_token\x18\a \x01(\v2\x1e.cloudprober.oauth.BearerTokenH\x00R\vbearerToken\x12=\n" +
	"\x19refresh_expiry_buffer_sec\x18\x14 \x01(\x05:\x0260R\x16refreshExpiryBufferSec\x124\n" +
	"\x14refresh_interval_sec\x18\x15 \x01(\x02:\x0230R\x12refreshIntervalSecB\b\n" +
	"\x06source\"\xd5\x01\n" +
	"\vHTTPRequest\x12\x1b\n" +
	"\ttoken_url\x18\x01 \x02(\tR\btokenUrl\x12\x16\n" +
	"\x06method\x18\x02 \x01(\tR\x06method\x12\x12\n" +
	"\x04data\x18\x03 \x03(\tR\x04data\x12B\n" +
	"\x06header\x18\b \x03(\v2*.cloudprober.oauth.HTTPRequest.HeaderEntryR\x06header\x1a9\n" +
	"\vHeaderEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x01\n" +
	"\vBearerToken\x12\x14\n" +
	"\x04file\x18\x01 \x01(\tH\x00R\x04file\x12\x12\n" +
	"\x03cmd\x18\x02 \x01(\tH\x00R\x03cmd\x120\n" +
	"\x13gce_service_account\x18\x03 \x01(\tH\x00R\x11gceServiceAccount\x12(\n" +
	"\x0fk8s_local_token\x18\x04 \x01(\bH\x00R\rk8sLocalToken\x120\n" +
	"\x14refresh_interval_sec\x18Z \x01(\x02R\x12refreshIntervalSecB\b\n" +
	"\x06source\"\x91\x01\n" +
	"\x11GoogleCredentials\x12\x1b\n" +
	"\tjson_file\x18\x01 \x01(\tR\bjsonFile\x12\x14\n" +
	"\x05scope\x18\x02 \x03(\tR\x05scope\x12-\n" +
	"\x13jwt_as_access_token\x18\x04 \x01(\bR\x10jwtAsAccessToken\x12\x1a\n" +
	"\baudience\x18\x03 \x01(\tR\baudienceB7Z5github.com/cloudprober/cloudprober/common/oauth/proto"

var (
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescOnce sync.Once
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescData []byte
)

func file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescGZIP() []byte {
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescOnce.Do(func() {
		file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDesc), len(file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDesc)))
	})
	return file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDescData
}

var file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_goTypes = []any{
	(*Config)(nil),            // 0: cloudprober.oauth.Config
	(*HTTPRequest)(nil),       // 1: cloudprober.oauth.HTTPRequest
	(*BearerToken)(nil),       // 2: cloudprober.oauth.BearerToken
	(*GoogleCredentials)(nil), // 3: cloudprober.oauth.GoogleCredentials
	nil,                       // 4: cloudprober.oauth.HTTPRequest.HeaderEntry
}
var file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_depIdxs = []int32{
	1, // 0: cloudprober.oauth.Config.http_request:type_name -> cloudprober.oauth.HTTPRequest
	3, // 1: cloudprober.oauth.Config.google_credentials:type_name -> cloudprober.oauth.GoogleCredentials
	2, // 2: cloudprober.oauth.Config.bearer_token:type_name -> cloudprober.oauth.BearerToken
	4, // 3: cloudprober.oauth.HTTPRequest.header:type_name -> cloudprober.oauth.HTTPRequest.HeaderEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_init() }
func file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_init() {
	if File_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto != nil {
		return
	}
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[0].OneofWrappers = []any{
		(*Config_File)(nil),
		(*Config_HttpRequest)(nil),
		(*Config_Cmd)(nil),
		(*Config_GceServiceAccount)(nil),
		(*Config_K8SLocalToken)(nil),
		(*Config_GoogleCredentials)(nil),
		(*Config_BearerToken)(nil),
	}
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes[2].OneofWrappers = []any{
		(*BearerToken_File)(nil),
		(*BearerToken_Cmd)(nil),
		(*BearerToken_GceServiceAccount)(nil),
		(*BearerToken_K8SLocalToken)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDesc), len(file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_goTypes,
		DependencyIndexes: file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_depIdxs,
		MessageInfos:      file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_msgTypes,
	}.Build()
	File_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto = out.File
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_goTypes = nil
	file_github_com_cloudprober_cloudprober_common_oauth_proto_config_proto_depIdxs = nil
}
